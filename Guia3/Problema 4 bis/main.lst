CCS PCM C Compiler, Version 5.076, 56587               12-oct.-20 12:39

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Ejercicios\Guia3\Problema 4\main.lst

               ROM used:   213 words (5%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           17 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0B1
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.3
001B:  GOTO   01E
001C:  BTFSC  0B.0
001D:  GOTO   039
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.0
0021:  GOTO   024
0022:  BTFSC  0C.0
0023:  GOTO   03B
0024:  BTFSS  0B.5
0025:  GOTO   028
0026:  BTFSC  0B.2
0027:  GOTO   03D
0028:  MOVF   22,W
0029:  MOVWF  04
002A:  MOVF   23,W
002B:  MOVWF  77
002C:  MOVF   24,W
002D:  MOVWF  78
002E:  MOVF   25,W
002F:  MOVWF  79
0030:  MOVF   26,W
0031:  MOVWF  7A
0032:  MOVF   27,W
0033:  MOVWF  0A
0034:  SWAPF  21,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
0039:  BCF    0A.3
003A:  GOTO   05C
003B:  BCF    0A.3
003C:  GOTO   04F
003D:  BCF    0A.3
003E:  GOTO   03F
.................... /* 
.................... Leyendo el estado de PB alto, mediante interrupciones. Asigne una función distinta para el estado de cada una de las 4 patas. 
.................... ? Si la pata PB4 cambia de 0-1, prender un led, esperar 500ms y apagarlo. 
.................... ? Si la pata PB5 cambia de 0-1, Disparar el timer0… de manera que por interrupción 1 segundo más tarde se prenda un led. Y 1 segundo más tarde se apague. 
.................... ? Si la pata PB6 cambia de 0-1, copiar el estado de PB0-3 a PA0-3. 
.................... ? Si la pata PB7 cambia de 0-1. Defínalo... Habilitar o deshabilitar el timer1 para que cada 500ms parpadee led  
.................... */ 
....................  
.................... #include <main.h> 
.................... #include <16F88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4000000) 
*
0066:  MOVLW  2B
0067:  MOVWF  04
0068:  BCF    03.7
0069:  MOVF   00,W
006A:  BTFSC  03.2
006B:  GOTO   07A
006C:  MOVLW  01
006D:  MOVWF  78
006E:  CLRF   77
006F:  DECFSZ 77,F
0070:  GOTO   06F
0071:  DECFSZ 78,F
0072:  GOTO   06E
0073:  MOVLW  4A
0074:  MOVWF  77
0075:  DECFSZ 77,F
0076:  GOTO   075
0077:  GOTO   078
0078:  DECFSZ 00,F
0079:  GOTO   06C
....................  
....................  
....................  
.................... #BYTE PORTA=0x05 
.................... #BYTE TRISA=0x85 
.................... #BYTE PORTB=0x06 
.................... #BYTE TRISB=0x86 
....................  
.................... #DEFINE MASKPA 0b11110000 //Mascara para obtener la parte alta de algun puerto 
.................... #DEFINE TMR0 0x3D //Seteamos el timer0 en 61 que es aprox 50ms 
.................... #DEFINE TMR1 0x0BDC //Este es el valor para 500ms en el timer1 (0,5s=(4/4000000)*8*(65536-TMR1))=>TMR1=3036 
....................  
.................... int cont=20; //Contamos 20 ciclos de 50ms para obtener 1 segundo 
.................... int toggleTimer1=0; //Variable para habilitar o deshabilitar el timer1 
....................  
.................... #INT_TIMER0 
.................... void TIMER0_isr(){ 
.................... 	cont--; 
*
003F:  DECFSZ 28,F
.................... 	if(cont<=0){ //Miramos si pasó un segundo 
0040:  GOTO   04A
.................... 		output_toggle(PIN_B1); //Prendemos o apagamos el led 
0041:  BSF    03.5
0042:  BCF    06.1
0043:  MOVLW  02
0044:  BCF    03.5
0045:  XORWF  06,F
.................... 		cont=20; //Restauramos el contador en 20 para que pase otro segundo 
0046:  MOVLW  14
0047:  MOVWF  28
.................... 		if(bit_test(PORTB,1)==0){ //Revisamos si el led esta apagado 
0048:  BTFSS  06.1
.................... 			disable_interrupts(INT_TIMER0); //Deshabilitamos las interrupciones del timer0 para que no haya mas interrupciones luego de apagar el led 
0049:  BCF    0B.5
.................... 		} 
.................... 	} 
.................... 	set_timer0(TMR0); //Cargamos el timer0 
004A:  MOVLW  3D
004B:  MOVWF  01
.................... } 
....................  
004C:  BCF    0B.2
004D:  BCF    0A.3
004E:  GOTO   028
.................... #INT_TIMER1 
.................... void TIMER1_isr(){ 
.................... 	output_toggle(PIN_B1); 
004F:  BSF    03.5
0050:  BCF    06.1
0051:  MOVLW  02
0052:  BCF    03.5
0053:  XORWF  06,F
.................... 	set_timer1(TMR1); //Cargamos el timer1 
0054:  CLRF   0E
0055:  MOVLW  0B
0056:  MOVWF  0F
0057:  MOVLW  DC
0058:  MOVWF  0E
.................... } 
....................  
0059:  BCF    0C.0
005A:  BCF    0A.3
005B:  GOTO   028
.................... #INT_RB 
.................... void RB_isr(){ 
.................... 	if(bit_test(PORTB,4)){ //Revisamos si se activo el pin 4 
005C:  BTFSS  06.4
005D:  GOTO   080
.................... 		output_high(PIN_B1); //Prendemos el led del pin B1 
005E:  BSF    03.5
005F:  BCF    06.1
0060:  BCF    03.5
0061:  BSF    06.1
.................... 		delay_ms(500); //Esperamos 500ms 
0062:  MOVLW  02
0063:  MOVWF  2A
0064:  MOVLW  FA
0065:  MOVWF  2B
*
007A:  DECFSZ 2A,F
007B:  GOTO   064
.................... 		output_low(PIN_B1); //Apagamos el led del pin B1 
007C:  BSF    03.5
007D:  BCF    06.1
007E:  BCF    03.5
007F:  BCF    06.1
.................... 	} 
.................... 	if(bit_test(PORTB,5)){ //Revisamos si se activo el pin 5, habilitamos la interrupcion del timer0 y seteamos el timer0 en 61 que es aprox 50ms 
0080:  BTFSS  06.5
0081:  GOTO   08F
.................... 		cont=20; 
0082:  MOVLW  14
0083:  MOVWF  28
.................... 		output_low(PIN_B1); //Apagamos el led, por si esta prendido 
0084:  BSF    03.5
0085:  BCF    06.1
0086:  BCF    03.5
0087:  BCF    06.1
.................... 		enable_interrupts(INT_TIMER0); //Habilitamos el timer0 
0088:  BSF    0B.5
.................... 		disable_interrupts(INT_TIMER1); //Deshabilitamos el timer1 
0089:  BSF    03.5
008A:  BCF    0C.0
.................... 		toggleTimer1=0; //Seteamos la variable que controla si se habilita o deshabilita el timer1 
008B:  BCF    03.5
008C:  CLRF   29
.................... 		set_timer0(TMR0); //Cargamos el timer0 con el valor de TMR0 
008D:  MOVLW  3D
008E:  MOVWF  01
.................... 	} 
.................... 	if(bit_test(PORTB,6)){ //Revisamos si se activo el pin 6 
008F:  BTFSS  06.6
0090:  GOTO   098
.................... 		/*Nos quedamos con la parte alta de A y llenamos con ceros la parte baja, 
.................... 		luego obtenemos la parte baja de B y llenamos con cero la parte alta, 
.................... 		finalmente hacemos un or entre ambos resultados para obtener la parte alta de A y la parte baja de B 
.................... 		y lo asignamos al puerto A*/ 
.................... 		PORTA=((PORTA & MASKPA) | (PORTB & ~MASKPA)); 
0091:  MOVF   05,W
0092:  ANDLW  F0
0093:  MOVWF  2A
0094:  MOVF   06,W
0095:  ANDLW  0F
0096:  IORWF  2A,W
0097:  MOVWF  05
.................... 	} 
.................... 	if(bit_test(PORTB,7)){ //Revisamos si se activo el pin 7 
0098:  BTFSS  06.7
0099:  GOTO   0AE
.................... 		if(toggleTimer1==0){ 
009A:  MOVF   29,F
009B:  BTFSS  03.2
009C:  GOTO   0A3
.................... 			enable_interrupts(INT_TIMER1); 
009D:  BSF    03.5
009E:  BSF    0C.0
.................... 			toggleTimer1=1; 
009F:  MOVLW  01
00A0:  BCF    03.5
00A1:  MOVWF  29
.................... 		} 
00A2:  GOTO   0A9
.................... 		else { 
.................... 			disable_interrupts(INT_TIMER1); 
00A3:  BSF    03.5
00A4:  BCF    0C.0
.................... 			output_low(PIN_B1); 
00A5:  BCF    06.1
00A6:  BCF    03.5
00A7:  BCF    06.1
.................... 			toggleTimer1=0; 
00A8:  CLRF   29
.................... 		} 
.................... 		set_timer1(TMR1); //Cargamos el timer1 con el valor de TMR1 
00A9:  CLRF   0E
00AA:  MOVLW  0B
00AB:  MOVWF  0F
00AC:  MOVLW  DC
00AD:  MOVWF  0E
.................... 	} 
00AE:  BCF    0B.0
00AF:  BCF    0A.3
00B0:  GOTO   028
.................... } 
....................  
.................... void main() 
00B1:  MOVF   03,W
00B2:  ANDLW  1F
00B3:  MOVWF  03
00B4:  MOVLW  14
00B5:  MOVWF  28
00B6:  CLRF   29
00B7:  BSF    03.5
00B8:  BCF    1F.4
00B9:  BCF    1F.5
00BA:  MOVF   1B,W
00BB:  ANDLW  80
00BC:  MOVWF  1B
00BD:  MOVLW  07
00BE:  MOVWF  1C
00BF:  BCF    03.7
.................... { 
.................... 	TRISA=0x00; 
00C0:  CLRF   05
.................... 	PORTA=0x00; 
00C1:  BCF    03.5
00C2:  CLRF   05
.................... 	TRISB=0xF0; 
00C3:  MOVLW  F0
00C4:  BSF    03.5
00C5:  MOVWF  06
.................... 	PORTB=0x00; 
00C6:  BCF    03.5
00C7:  CLRF   06
....................   	 
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); //Inicializamos el timer0 
00C8:  BSF    03.5
00C9:  MOVF   01,W
00CA:  ANDLW  C0
00CB:  IORLW  07
00CC:  MOVWF  01
.................... 	setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); //Inicializamos el timer1 
00CD:  MOVLW  B5
00CE:  BCF    03.5
00CF:  MOVWF  10
.................... 	enable_interrupts(INT_RB); //Habilitamos las interrupciones de la parte alta del puerto B 
00D0:  BSF    0B.3
.................... 	enable_interrupts(GLOBAL); //Habilitamos las interrupciones globales 
00D1:  MOVLW  C0
00D2:  IORWF  0B,F
....................   	 
.................... 	while(TRUE); 
00D3:  GOTO   0D3
.................... } 
00D4:  SLEEP

Configuration Fuses:
   Word  1: 3F61   NOWDT PUT XT MCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
