CCS PCM C Compiler, Version 5.076, 56587               13-oct.-20 15:53

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Ejercicios\Guia3\Problema 4\main.lst

               ROM used:   213 words (5%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           17 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0B1
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.3
001B:  GOTO   01E
001C:  BTFSC  0B.0
001D:  GOTO   039
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.0
0021:  GOTO   024
0022:  BTFSC  0C.0
0023:  GOTO   03B
0024:  BTFSS  0B.5
0025:  GOTO   028
0026:  BTFSC  0B.2
0027:  GOTO   03D
0028:  MOVF   22,W
0029:  MOVWF  04
002A:  MOVF   23,W
002B:  MOVWF  77
002C:  MOVF   24,W
002D:  MOVWF  78
002E:  MOVF   25,W
002F:  MOVWF  79
0030:  MOVF   26,W
0031:  MOVWF  7A
0032:  MOVF   27,W
0033:  MOVWF  0A
0034:  SWAPF  21,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
0039:  BCF    0A.3
003A:  GOTO   069
003B:  BCF    0A.3
003C:  GOTO   04F
003D:  BCF    0A.3
003E:  GOTO   03F
.................... /* 
.................... Leyendo el estado de PB alto, mediante interrupciones. Asigne una función distinta para el estado de cada una de las 4 patas. 
.................... ? Si la pata PB4 cambia de 0-1, prender un led, esperar 500ms y apagarlo. 
.................... ? Si la pata PB5 cambia de 0-1, Disparar el timer0… de manera que por interrupción 1 segundo más tarde se prenda un led. Y 1 segundo más tarde se apague. 
.................... ? Si la pata PB6 cambia de 0-1, copiar el estado de PB0-3 a PA0-3. 
.................... ? Si la pata PB7 cambia de 0-1. Defínalo... Parpadeo de un led usando el timer 1 cada 500ms durante 4 segundos 
.................... */ 
.................... #include <main.h> 
.................... #include <16F88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4MHz) 
*
0073:  MOVLW  2B
0074:  MOVWF  04
0075:  BCF    03.7
0076:  MOVF   00,W
0077:  BTFSC  03.2
0078:  GOTO   087
0079:  MOVLW  01
007A:  MOVWF  78
007B:  CLRF   77
007C:  DECFSZ 77,F
007D:  GOTO   07C
007E:  DECFSZ 78,F
007F:  GOTO   07B
0080:  MOVLW  4A
0081:  MOVWF  77
0082:  DECFSZ 77,F
0083:  GOTO   082
0084:  GOTO   085
0085:  DECFSZ 00,F
0086:  GOTO   079
....................  
....................  
.................... #define MASKPA 0b11110000 //Mascara para obtener la parte alta de algun puerto 
.................... #define TMR0 0x40        //Seteamos el timer0 en 61 que es aprox 50ms 
.................... #define TMR1 0x0BDC    //Este es el valor para 500ms en el timer1 (0,5s=(4/4000000)8(65536-TMR1))=>TMR1=3036 
....................  
.................... #BYTE PORTA=0x05 
.................... #BYTE TRISA=0x85 
.................... #BYTE PORTB=0x06 
.................... #BYTE TRISB=0x86 
....................  
.................... unsigned int count = 20;    //Contamos 20 ciclos de 50ms para obtener 1 segundo 
.................... unsigned int ciclotmr1 = 0;//Variable para habilitar o deshabilitar el timer1 
....................  
.................... #INT_TIMER0 
.................... void TIMER0_isr() { 
....................    count--; 
*
003F:  DECFSZ 28,F
....................    if(count == 0) { //Miramos si pasó un segundo 
0040:  GOTO   04A
....................       output_toggle(PIN_B1); //Prendemos o apagamos el led 
0041:  BSF    03.5
0042:  BCF    06.1
0043:  MOVLW  02
0044:  BCF    03.5
0045:  XORWF  06,F
....................       count = 20; //Restauramos el contador en 20 para que pase otro segundo 
0046:  MOVLW  14
0047:  MOVWF  28
....................       if(!bit_test(PORTB, 1))//Revisamos si el led esta apagado 
0048:  BTFSS  06.1
....................          disable_interrupts(INT_TIMER0); //Deshabilitamos las interrupciones del timer0 para que no haya mas interrupciones luego de apagar el led 
0049:  BCF    0B.5
....................    } set_timer0(TMR0); //Cargamos el timer0 
004A:  MOVLW  40
004B:  MOVWF  01
.................... } 
....................  
004C:  BCF    0B.2
004D:  BCF    0A.3
004E:  GOTO   028
.................... #INT_TIMER1 
.................... void TIMER1_isr() { 
....................    ciclotmr1++; 
004F:  INCF   29,F
....................    output_toggle(PIN_B1); //Prendemos o apagamos el led 
0050:  BSF    03.5
0051:  BCF    06.1
0052:  MOVLW  02
0053:  BCF    03.5
0054:  XORWF  06,F
....................    if(ciclotmr1 >= 8) { //Verificamos si pasaron 4 segundos (8 ciclos de 500 ms) 
0055:  MOVF   29,W
0056:  SUBLW  07
0057:  BTFSC  03.0
0058:  GOTO   061
....................       disable_interrupts(INT_TIMER1); //Deshabilitamos las interrupciones del timer1 para que no haya mas interrupciones luego de apagar el led 
0059:  BSF    03.5
005A:  BCF    0C.0
....................       ciclotmr1 = 0; //Reseteamos el ciclo 
005B:  BCF    03.5
005C:  CLRF   29
....................       output_low(PIN_B1); //Apagamos el led para asegurarnos 
005D:  BSF    03.5
005E:  BCF    06.1
005F:  BCF    03.5
0060:  BCF    06.1
....................    } 
....................    set_timer1(TMR1); //Cargamos el timer1 
0061:  CLRF   0E
0062:  MOVLW  0B
0063:  MOVWF  0F
0064:  MOVLW  DC
0065:  MOVWF  0E
.................... } 
....................  
0066:  BCF    0C.0
0067:  BCF    0A.3
0068:  GOTO   028
.................... #INT_RB 
.................... void RB_isr(){ 
....................    if(bit_test(PORTB,4)){ //Revisamos si se activo el pin 4 
0069:  BTFSS  06.4
006A:  GOTO   08D
....................       output_high(PIN_B1); //Prendemos el led del pin B1 
006B:  BSF    03.5
006C:  BCF    06.1
006D:  BCF    03.5
006E:  BSF    06.1
....................       delay_ms(500); //Esperamos 500ms 
006F:  MOVLW  02
0070:  MOVWF  2A
0071:  MOVLW  FA
0072:  MOVWF  2B
*
0087:  DECFSZ 2A,F
0088:  GOTO   071
....................       output_low(PIN_B1); //Apagamos el led del pin B1 
0089:  BSF    03.5
008A:  BCF    06.1
008B:  BCF    03.5
008C:  BCF    06.1
....................    } 
....................    if(bit_test(PORTB, 5)) { 
008D:  BTFSS  06.5
008E:  GOTO   098
....................       count=20; 
008F:  MOVLW  14
0090:  MOVWF  28
....................       output_low(PIN_B1); //Apagamos el led, por si esta prendido 
0091:  BSF    03.5
0092:  BCF    06.1
0093:  BCF    03.5
0094:  BCF    06.1
....................       enable_interrupts(INT_TIMER0); //Habilitamos el timer0 
0095:  BSF    0B.5
....................       set_timer0(TMR0); //Cargamos el timer0 con el valor de TMR0 
0096:  MOVLW  40
0097:  MOVWF  01
....................    } 
....................    if(bit_test(PORTB,6)){ //Revisamos si se activo el pin 6 
0098:  BTFSS  06.6
0099:  GOTO   0A1
....................       /*Nos quedamos con la parte alta de A y llenamos con ceros la parte baja, 
....................       luego obtenemos la parte baja de B y llenamos con cero la parte alta, 
....................       finalmente hacemos un or entre ambos resultados para obtener la parte alta de A y la parte baja de B 
....................       y lo asignamos al puerto A*/ 
....................       PORTA=((PORTA & MASKPA) | (PORTB & ~MASKPA)); 
009A:  MOVF   05,W
009B:  ANDLW  F0
009C:  MOVWF  2A
009D:  MOVF   06,W
009E:  ANDLW  0F
009F:  IORWF  2A,W
00A0:  MOVWF  05
....................    } 
....................    if(bit_test(PORTB, 7)) { 
00A1:  BTFSS  06.7
00A2:  GOTO   0AE
....................       ciclotmr1 = 0; //Seteamos el ciclo del timer1 en 0 
00A3:  CLRF   29
....................       enable_interrupts(INT_TIMER1); //Habilitamos el timer1 
00A4:  BSF    03.5
00A5:  BSF    0C.0
....................       output_low(PIN_B1); //Apagamos el led 
00A6:  BCF    06.1
00A7:  BCF    03.5
00A8:  BCF    06.1
....................       set_timer1(TMR1); //Cargamos el timer1 con el valor de TMR1 
00A9:  CLRF   0E
00AA:  MOVLW  0B
00AB:  MOVWF  0F
00AC:  MOVLW  DC
00AD:  MOVWF  0E
....................    } 
00AE:  BCF    0B.0
00AF:  BCF    0A.3
00B0:  GOTO   028
.................... } 
....................  
.................... void main() { 
00B1:  MOVF   03,W
00B2:  ANDLW  1F
00B3:  MOVWF  03
00B4:  MOVLW  14
00B5:  MOVWF  28
00B6:  CLRF   29
00B7:  BSF    03.5
00B8:  BCF    1F.4
00B9:  BCF    1F.5
00BA:  MOVF   1B,W
00BB:  ANDLW  80
00BC:  MOVWF  1B
00BD:  MOVLW  07
00BE:  MOVWF  1C
00BF:  BCF    03.7
....................    TRISA=0x00; 
00C0:  CLRF   05
....................    PORTA=0x00; 
00C1:  BCF    03.5
00C2:  CLRF   05
....................    TRISB=0xF0; 
00C3:  MOVLW  F0
00C4:  BSF    03.5
00C5:  MOVWF  06
....................    PORTB=0x00; 
00C6:  BCF    03.5
00C7:  CLRF   06
....................  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); //Inicializamos el timer0 
00C8:  BSF    03.5
00C9:  MOVF   01,W
00CA:  ANDLW  C0
00CB:  IORLW  07
00CC:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); //Inicializamos el timer1 
00CD:  MOVLW  B5
00CE:  BCF    03.5
00CF:  MOVWF  10
....................    enable_interrupts(INT_RB); //Habilitamos las interrupciones de la parte alta del puerto B 
00D0:  BSF    0B.3
....................    enable_interrupts(GLOBAL); //Habilitamos las interrupciones globales 
00D1:  MOVLW  C0
00D2:  IORWF  0B,F
....................  
....................       while(TRUE); 
00D3:  GOTO   0D3
.................... } 
00D4:  SLEEP

Configuration Fuses:
   Word  1: 3F61   NOWDT PUT XT MCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
