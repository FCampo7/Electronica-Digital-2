CCS PCM C Compiler, Version 5.076, 56587               19-oct.-20 16:21

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Ejercicios\Guia4\Problema 1\main.lst

               ROM used:   574 words (14%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           22 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1F8
0003:  NOP
.................... /* 
.................... Mostrar en la pantalla de un LCD el texto "Hello World", limpiar la 
.................... pantalla, y mostrar el texto "Bienvenidos a EDI2". Volver a limpiar la pantalla y mostrar el texto "Contador=" y  
.................... seguido la cantidad de veces que se repitió el bucle. 
.................... */ 
....................  
.................... #include <main.h> 
.................... #include <16F88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
0004:  DATA 0C,24
0005:  DATA 65,36
0006:  DATA EC,37
0007:  DATA A0,2B
0008:  DATA 6F,39
0009:  DATA 6C,32
000A:  DATA 0A,00
000B:  DATA 0C,21
000C:  DATA E9,32
000D:  DATA 6E,3B
000E:  DATA 65,37
000F:  DATA 69,32
0010:  DATA EF,39
0011:  DATA A0,30
0012:  DATA 20,05
0013:  DATA 45,22
0014:  DATA 49,19
0015:  DATA 00,01
0016:  DATA 8C,21
0017:  DATA 6F,37
0018:  DATA F4,30
0019:  DATA E4,37
001A:  DATA F2,1E
001B:  DATA A5,3A
001C:  DATA 00,00
*
00FF:  MOVF   0B,W
0100:  MOVWF  23
0101:  BCF    0B.7
0102:  BSF    03.5
0103:  BSF    03.6
0104:  BSF    0C.7
0105:  BSF    0C.0
0106:  NOP
0107:  NOP
0108:  BCF    03.5
0109:  BCF    03.6
010A:  BTFSC  23.7
010B:  BSF    0B.7
010C:  BSF    03.6
010D:  MOVF   0C,W
010E:  ANDLW  7F
010F:  BTFSC  03.2
0110:  GOTO   153
0111:  BCF    03.6
0112:  MOVWF  23
0113:  BSF    03.6
0114:  MOVF   0D,W
0115:  BCF    03.6
0116:  MOVWF  24
0117:  BSF    03.6
0118:  MOVF   0F,W
0119:  BCF    03.6
011A:  MOVWF  25
011B:  MOVF   23,W
011C:  MOVWF  27
011D:  CALL   0D3
011E:  MOVF   24,W
011F:  BSF    03.6
0120:  MOVWF  0D
0121:  BCF    03.6
0122:  MOVF   25,W
0123:  BSF    03.6
0124:  MOVWF  0F
0125:  BCF    03.6
0126:  MOVF   0B,W
0127:  MOVWF  26
0128:  BCF    0B.7
0129:  BSF    03.5
012A:  BSF    03.6
012B:  BSF    0C.7
012C:  BSF    0C.0
012D:  NOP
012E:  NOP
012F:  BCF    03.5
0130:  BCF    03.6
0131:  BTFSC  26.7
0132:  BSF    0B.7
0133:  BSF    03.6
0134:  RLF    0C,W
0135:  RLF    0E,W
0136:  ANDLW  7F
0137:  BTFSC  03.2
0138:  GOTO   153
0139:  BCF    03.6
013A:  MOVWF  23
013B:  BSF    03.6
013C:  MOVF   0D,W
013D:  BCF    03.6
013E:  MOVWF  24
013F:  BSF    03.6
0140:  MOVF   0F,W
0141:  BCF    03.6
0142:  MOVWF  25
0143:  MOVF   23,W
0144:  MOVWF  27
0145:  CALL   0D3
0146:  MOVF   24,W
0147:  BSF    03.6
0148:  MOVWF  0D
0149:  BCF    03.6
014A:  MOVF   25,W
014B:  BSF    03.6
014C:  MOVWF  0F
014D:  INCF   0D,F
014E:  BTFSC  03.2
014F:  INCF   0F,F
0150:  BCF    03.6
0151:  GOTO   0FF
0152:  BSF    03.6
0153:  BCF    03.6
0154:  RETURN
0155:  MOVF   0B,W
0156:  MOVWF  24
0157:  BCF    0B.7
0158:  BSF    03.5
0159:  BSF    03.6
015A:  BSF    0C.7
015B:  BSF    0C.0
015C:  NOP
015D:  NOP
015E:  BCF    03.5
015F:  BCF    03.6
0160:  BTFSC  24.7
0161:  BSF    0B.7
0162:  BTFSC  03.0
0163:  GOTO   18C
0164:  BSF    03.6
0165:  MOVF   0C,W
0166:  ANDLW  7F
0167:  BCF    03.6
0168:  MOVWF  24
0169:  BSF    03.6
016A:  MOVF   0D,W
016B:  BCF    03.6
016C:  MOVWF  25
016D:  BSF    03.6
016E:  MOVF   0F,W
016F:  BCF    03.6
0170:  MOVWF  26
0171:  MOVF   24,W
0172:  MOVWF  27
0173:  CALL   0D3
0174:  MOVF   25,W
0175:  BSF    03.6
0176:  MOVWF  0D
0177:  BCF    03.6
0178:  MOVF   26,W
0179:  BSF    03.6
017A:  MOVWF  0F
017B:  BCF    03.6
017C:  MOVF   0B,W
017D:  MOVWF  27
017E:  BCF    0B.7
017F:  BSF    03.5
0180:  BSF    03.6
0181:  BSF    0C.7
0182:  BSF    0C.0
0183:  NOP
0184:  NOP
0185:  BCF    03.5
0186:  BCF    03.6
0187:  BTFSC  27.7
0188:  BSF    0B.7
0189:  DECFSZ 23,F
018A:  GOTO   18C
018B:  GOTO   1AB
018C:  BSF    03.6
018D:  RLF    0C,W
018E:  RLF    0E,W
018F:  ANDLW  7F
0190:  BCF    03.6
0191:  MOVWF  24
0192:  BSF    03.6
0193:  MOVF   0D,W
0194:  BCF    03.6
0195:  MOVWF  25
0196:  BSF    03.6
0197:  MOVF   0F,W
0198:  BCF    03.6
0199:  MOVWF  26
019A:  MOVF   24,W
019B:  MOVWF  27
019C:  CALL   0D3
019D:  MOVF   25,W
019E:  BSF    03.6
019F:  MOVWF  0D
01A0:  BCF    03.6
01A1:  MOVF   26,W
01A2:  BSF    03.6
01A3:  MOVWF  0F
01A4:  INCF   0D,F
01A5:  BTFSC  03.2
01A6:  INCF   0F,F
01A7:  BCF    03.0
01A8:  BCF    03.6
01A9:  DECFSZ 23,F
01AA:  GOTO   155
01AB:  BCF    0A.3
01AC:  GOTO   230 (RETURN)
01AD:  MOVF   26,W
01AE:  CLRF   78
01AF:  SUBWF  25,W
01B0:  BTFSC  03.0
01B1:  GOTO   1B5
01B2:  MOVF   25,W
01B3:  MOVWF  77
01B4:  GOTO   1C1
01B5:  CLRF   77
01B6:  MOVLW  08
01B7:  MOVWF  27
01B8:  RLF    25,F
01B9:  RLF    77,F
01BA:  MOVF   26,W
01BB:  SUBWF  77,W
01BC:  BTFSC  03.0
01BD:  MOVWF  77
01BE:  RLF    78,F
01BF:  DECFSZ 27,F
01C0:  GOTO   1B8
01C1:  RETURN
01C2:  MOVF   78,W
01C3:  MOVF   23,W
01C4:  MOVWF  25
01C5:  MOVLW  64
01C6:  MOVWF  26
01C7:  CALL   1AD
01C8:  MOVF   77,W
01C9:  MOVWF  23
01CA:  MOVF   78,W
01CB:  MOVLW  30
01CC:  BTFSS  03.2
01CD:  GOTO   1D5
01CE:  BTFSS  24.1
01CF:  GOTO   1DC
01D0:  BTFSC  24.3
01D1:  GOTO   1DC
01D2:  BTFSC  24.4
01D3:  MOVLW  20
01D4:  GOTO   1D8
01D5:  BCF    24.3
01D6:  BCF    24.4
01D7:  BSF    24.0
01D8:  ADDWF  78,F
01D9:  MOVF   78,W
01DA:  MOVWF  27
01DB:  CALL   0D3
01DC:  MOVF   23,W
01DD:  MOVWF  25
01DE:  MOVLW  0A
01DF:  MOVWF  26
01E0:  CALL   1AD
01E1:  MOVF   77,W
01E2:  MOVWF  23
01E3:  MOVF   78,W
01E4:  MOVLW  30
01E5:  BTFSS  03.2
01E6:  GOTO   1ED
01E7:  BTFSC  24.3
01E8:  GOTO   1F1
01E9:  BTFSS  24.0
01EA:  GOTO   1F1
01EB:  BTFSC  24.4
01EC:  MOVLW  20
01ED:  ADDWF  78,F
01EE:  MOVF   78,W
01EF:  MOVWF  27
01F0:  CALL   0D3
01F1:  MOVLW  30
01F2:  ADDWF  23,F
01F3:  MOVF   23,W
01F4:  MOVWF  27
01F5:  CALL   0D3
01F6:  BCF    0A.3
01F7:  GOTO   235 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4000000) 
*
001D:  MOVLW  28
001E:  MOVWF  04
001F:  BCF    03.7
0020:  MOVF   00,W
0021:  BTFSC  03.2
0022:  GOTO   031
0023:  MOVLW  01
0024:  MOVWF  78
0025:  CLRF   77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 78,F
0029:  GOTO   025
002A:  MOVLW  4A
002B:  MOVWF  77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  GOTO   02F
002F:  DECFSZ 00,F
0030:  GOTO   023
0031:  RETURN
....................  
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
004A:  MOVLW  0F
004B:  BSF    03.5
004C:  ANDWF  06,W
004D:  IORLW  F0
004E:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004F:  BCF    03.5
0050:  BSF    06.2
....................    delay_cycles(1); 
0051:  NOP
....................    lcd_output_enable(1); 
0052:  BSF    06.0
....................    delay_cycles(1); 
0053:  NOP
....................    high = lcd_read_nibble(); 
0054:  CALL   03E
0055:  MOVF   78,W
0056:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0057:  BCF    06.0
....................    delay_cycles(1); 
0058:  NOP
....................    lcd_output_enable(1); 
0059:  BSF    06.0
....................    delay_us(1); 
005A:  NOP
....................    low = lcd_read_nibble(); 
005B:  CALL   03E
005C:  MOVF   78,W
005D:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
005E:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005F:  MOVLW  0F
0060:  BSF    03.5
0061:  ANDWF  06,W
0062:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0063:  BCF    03.5
0064:  SWAPF  2F,W
0065:  MOVWF  77
0066:  MOVLW  F0
0067:  ANDWF  77,F
0068:  MOVF   77,W
0069:  IORWF  2E,W
006A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003E:  MOVF   06,W
003F:  MOVWF  77
0040:  SWAPF  06,W
0041:  ANDLW  0F
0042:  MOVWF  78
....................   #endif 
0043:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0032:  SWAPF  2F,W
0033:  ANDLW  F0
0034:  MOVWF  77
0035:  MOVLW  0F
0036:  ANDWF  06,W
0037:  IORWF  77,W
0038:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0039:  NOP
....................    lcd_output_enable(1); 
003A:  BSF    06.0
....................    delay_us(2); 
003B:  GOTO   03C
....................    lcd_output_enable(0); 
003C:  BCF    06.0
003D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0044:  BSF    03.5
0045:  BCF    06.0
....................    lcd_rs_tris(); 
0046:  BCF    06.1
....................    lcd_rw_tris(); 
0047:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0048:  BCF    03.5
0049:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
006B:  MOVF   78,W
006C:  MOVWF  2E
006D:  BTFSC  2E.7
006E:  GOTO   04A
....................    lcd_output_rs(address); 
006F:  BTFSS  2C.0
0070:  BCF    06.1
0071:  BTFSC  2C.0
0072:  BSF    06.1
....................    delay_cycles(1); 
0073:  NOP
....................    lcd_output_rw(0); 
0074:  BCF    06.2
....................    delay_cycles(1); 
0075:  NOP
....................    lcd_output_enable(0); 
0076:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0077:  SWAPF  2D,W
0078:  MOVWF  2E
0079:  MOVLW  0F
007A:  ANDWF  2E,F
007B:  MOVF   2E,W
007C:  MOVWF  2F
007D:  CALL   032
....................    lcd_send_nibble(n & 0xf); 
007E:  MOVF   2D,W
007F:  ANDLW  0F
0080:  MOVWF  2E
0081:  MOVWF  2F
0082:  CALL   032
0083:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0084:  MOVLW  28
0085:  MOVWF  24
0086:  MOVLW  0C
0087:  MOVWF  25
0088:  MOVLW  01
0089:  MOVWF  26
008A:  MOVLW  06
008B:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
008C:  BCF    06.0
....................    lcd_output_rs(0); 
008D:  BCF    06.1
....................    lcd_output_rw(0); 
008E:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008F:  MOVLW  0F
0090:  BSF    03.5
0091:  ANDWF  06,W
0092:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0093:  BCF    06.0
....................    lcd_rs_tris(); 
0094:  BCF    06.1
....................    lcd_rw_tris(); 
0095:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0096:  MOVLW  0F
0097:  BCF    03.5
0098:  MOVWF  28
0099:  CALL   01D
....................    for(i=1;i<=3;++i) 
009A:  MOVLW  01
009B:  MOVWF  23
009C:  MOVF   23,W
009D:  SUBLW  03
009E:  BTFSS  03.0
009F:  GOTO   0A8
....................    { 
....................        lcd_send_nibble(3); 
00A0:  MOVLW  03
00A1:  MOVWF  2F
00A2:  CALL   032
....................        delay_ms(5); 
00A3:  MOVLW  05
00A4:  MOVWF  28
00A5:  CALL   01D
00A6:  INCF   23,F
00A7:  GOTO   09C
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A8:  MOVLW  02
00A9:  MOVWF  2F
00AA:  CALL   032
....................    delay_ms(5); 
00AB:  MOVLW  05
00AC:  MOVWF  28
00AD:  CALL   01D
....................    for(i=0;i<=3;++i) 
00AE:  CLRF   23
00AF:  MOVF   23,W
00B0:  SUBLW  03
00B1:  BTFSS  03.0
00B2:  GOTO   0BF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B3:  MOVLW  24
00B4:  ADDWF  23,W
00B5:  MOVWF  04
00B6:  BCF    03.7
00B7:  MOVF   00,W
00B8:  MOVWF  28
00B9:  CLRF   2C
00BA:  MOVF   28,W
00BB:  MOVWF  2D
00BC:  CALL   044
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BD:  INCF   23,F
00BE:  GOTO   0AF
00BF:  BCF    0A.3
00C0:  GOTO   209 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C1:  DECFSZ 29,W
00C2:  GOTO   0C4
00C3:  GOTO   0C7
....................       address=LCD_LINE_TWO; 
00C4:  MOVLW  40
00C5:  MOVWF  2A
00C6:  GOTO   0C8
....................    else 
....................       address=0; 
00C7:  CLRF   2A
....................       
....................    address+=x-1; 
00C8:  MOVLW  01
00C9:  SUBWF  28,W
00CA:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
00CB:  MOVF   2A,W
00CC:  IORLW  80
00CD:  MOVWF  2B
00CE:  CLRF   2C
00CF:  MOVF   2B,W
00D0:  MOVWF  2D
00D1:  CALL   044
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D2:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D3:  MOVF   27,W
00D4:  XORLW  07
00D5:  BTFSC  03.2
00D6:  GOTO   0E1
00D7:  XORLW  0B
00D8:  BTFSC  03.2
00D9:  GOTO   0E6
00DA:  XORLW  06
00DB:  BTFSC  03.2
00DC:  GOTO   0EE
00DD:  XORLW  02
00DE:  BTFSC  03.2
00DF:  GOTO   0F4
00E0:  GOTO   0F9
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E1:  MOVLW  01
00E2:  MOVWF  28
00E3:  MOVWF  29
00E4:  CALL   0C1
00E5:  GOTO   0FE
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E6:  CLRF   2C
00E7:  MOVLW  01
00E8:  MOVWF  2D
00E9:  CALL   044
....................                      delay_ms(2); 
00EA:  MOVLW  02
00EB:  MOVWF  28
00EC:  CALL   01D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00ED:  GOTO   0FE
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00EE:  MOVLW  01
00EF:  MOVWF  28
00F0:  MOVLW  02
00F1:  MOVWF  29
00F2:  CALL   0C1
00F3:  GOTO   0FE
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F4:  CLRF   2C
00F5:  MOVLW  10
00F6:  MOVWF  2D
00F7:  CALL   044
00F8:  GOTO   0FE
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F9:  MOVLW  01
00FA:  MOVWF  2C
00FB:  MOVF   27,W
00FC:  MOVWF  2D
00FD:  CALL   044
....................      #endif 
....................    } 
00FE:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
01F8:  MOVF   03,W
01F9:  ANDLW  1F
01FA:  MOVWF  03
01FB:  CLRF   21
01FC:  CLRF   20
01FD:  BSF    03.5
01FE:  BCF    1F.4
01FF:  BCF    1F.5
0200:  MOVF   1B,W
0201:  ANDLW  80
0202:  MOVWF  1B
0203:  MOVLW  07
0204:  MOVWF  1C
0205:  BCF    03.7
0206:  BCF    03.5
0207:  CLRF   22
.................... { 
....................   	 
.................... 	unsigned int cont=0; 
....................  
.................... 	lcd_init(); 
0208:  GOTO   084
....................   	 
.................... 	while(TRUE) 
.................... 	{ 
.................... 		cont++; 
0209:  INCF   22,F
.................... 		printf(lcd_putc,"\fHello World\n"); 
020A:  MOVLW  04
020B:  BSF    03.6
020C:  MOVWF  0D
020D:  MOVLW  00
020E:  MOVWF  0F
020F:  BCF    03.6
0210:  CALL   0FF
.................... 		delay_ms(500); 
0211:  MOVLW  02
0212:  MOVWF  23
0213:  MOVLW  FA
0214:  MOVWF  28
0215:  CALL   01D
0216:  DECFSZ 23,F
0217:  GOTO   213
.................... 		printf(lcd_putc,"\fBienvenidos a \nEDI2"); 
0218:  MOVLW  0B
0219:  BSF    03.6
021A:  MOVWF  0D
021B:  MOVLW  00
021C:  MOVWF  0F
021D:  BCF    03.6
021E:  CALL   0FF
.................... 		delay_ms(500); 
021F:  MOVLW  02
0220:  MOVWF  23
0221:  MOVLW  FA
0222:  MOVWF  28
0223:  CALL   01D
0224:  DECFSZ 23,F
0225:  GOTO   221
.................... 		printf(lcd_putc,"\fContador=%u",cont); 
0226:  MOVLW  16
0227:  BSF    03.6
0228:  MOVWF  0D
0229:  MOVLW  00
022A:  MOVWF  0F
022B:  BCF    03.0
022C:  MOVLW  0A
022D:  BCF    03.6
022E:  MOVWF  23
022F:  GOTO   155
0230:  MOVF   22,W
0231:  MOVWF  23
0232:  MOVLW  1B
0233:  MOVWF  24
0234:  GOTO   1C2
.................... 		delay_ms(500); 
0235:  MOVLW  02
0236:  MOVWF  23
0237:  MOVLW  FA
0238:  MOVWF  28
0239:  CALL   01D
023A:  DECFSZ 23,F
023B:  GOTO   237
023C:  GOTO   209
.................... 	} 
....................  
.................... } 
023D:  SLEEP

Configuration Fuses:
   Word  1: 3F61   NOWDT PUT XT MCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
