CCS PCM C Compiler, Version 5.076, 56587               14-oct.-20 12:22

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Ejercicios\Guia4\Ejemplo 1\main.lst

               ROM used:   493 words (12%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           22 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   18A
0003:  NOP
.................... #include <main.h> 
.................... #include <16F88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
0004:  DATA B1,14
0005:  DATA A0,26
0006:  DATA 65,32
0007:  DATA 69,39
0008:  DATA 00,00
0009:  DATA B1,14
000A:  DATA A0,26
000B:  DATA 65,32
000C:  DATA 69,39
000D:  DATA 00,01
000E:  DATA B2,14
000F:  DATA A0,21
0010:  DATA 61,36
0011:  DATA E3,3A
0012:  DATA EC,30
0013:  DATA 72,00
0014:  DATA B3,14
0015:  DATA A0,24
0016:  DATA EE,34
0017:  DATA E3,34
0018:  DATA 61,36
0019:  DATA 69,3D
001A:  DATA 61,39
001B:  DATA 00,00
*
00FE:  MOVF   0B,W
00FF:  MOVWF  24
0100:  BCF    0B.7
0101:  BSF    03.5
0102:  BSF    03.6
0103:  BSF    0C.7
0104:  BSF    0C.0
0105:  NOP
0106:  NOP
0107:  BCF    03.5
0108:  BCF    03.6
0109:  BTFSC  24.7
010A:  BSF    0B.7
010B:  BSF    03.6
010C:  MOVF   0C,W
010D:  ANDLW  7F
010E:  BTFSC  03.2
010F:  GOTO   152
0110:  BCF    03.6
0111:  MOVWF  24
0112:  BSF    03.6
0113:  MOVF   0D,W
0114:  BCF    03.6
0115:  MOVWF  25
0116:  BSF    03.6
0117:  MOVF   0F,W
0118:  BCF    03.6
0119:  MOVWF  26
011A:  MOVF   24,W
011B:  MOVWF  27
011C:  CALL   0D2
011D:  MOVF   25,W
011E:  BSF    03.6
011F:  MOVWF  0D
0120:  BCF    03.6
0121:  MOVF   26,W
0122:  BSF    03.6
0123:  MOVWF  0F
0124:  BCF    03.6
0125:  MOVF   0B,W
0126:  MOVWF  27
0127:  BCF    0B.7
0128:  BSF    03.5
0129:  BSF    03.6
012A:  BSF    0C.7
012B:  BSF    0C.0
012C:  NOP
012D:  NOP
012E:  BCF    03.5
012F:  BCF    03.6
0130:  BTFSC  27.7
0131:  BSF    0B.7
0132:  BSF    03.6
0133:  RLF    0C,W
0134:  RLF    0E,W
0135:  ANDLW  7F
0136:  BTFSC  03.2
0137:  GOTO   152
0138:  BCF    03.6
0139:  MOVWF  24
013A:  BSF    03.6
013B:  MOVF   0D,W
013C:  BCF    03.6
013D:  MOVWF  25
013E:  BSF    03.6
013F:  MOVF   0F,W
0140:  BCF    03.6
0141:  MOVWF  26
0142:  MOVF   24,W
0143:  MOVWF  27
0144:  CALL   0D2
0145:  MOVF   25,W
0146:  BSF    03.6
0147:  MOVWF  0D
0148:  BCF    03.6
0149:  MOVF   26,W
014A:  BSF    03.6
014B:  MOVWF  0F
014C:  INCF   0D,F
014D:  BTFSC  03.2
014E:  INCF   0F,F
014F:  BCF    03.6
0150:  GOTO   0FE
0151:  BSF    03.6
0152:  BCF    03.6
0153:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4000000) 
*
001C:  MOVLW  29
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   030
0022:  MOVLW  01
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  4A
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  DECFSZ 00,F
002F:  GOTO   022
0030:  RETURN
....................  
....................  
.................... #define use_portb_lcd TRUE 
.................... #fuses XT,NOWDT,NOMCLR 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0049:  MOVLW  0F
004A:  BSF    03.5
004B:  ANDWF  06,W
004C:  IORLW  F0
004D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004E:  BCF    03.5
004F:  BSF    06.2
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BSF    06.0
....................    delay_cycles(1); 
0052:  NOP
....................    high = lcd_read_nibble(); 
0053:  CALL   03D
0054:  MOVF   78,W
0055:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0056:  BCF    06.0
....................    delay_cycles(1); 
0057:  NOP
....................    lcd_output_enable(1); 
0058:  BSF    06.0
....................    delay_us(1); 
0059:  NOP
....................    low = lcd_read_nibble(); 
005A:  CALL   03D
005B:  MOVF   78,W
005C:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
005D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005E:  MOVLW  0F
005F:  BSF    03.5
0060:  ANDWF  06,W
0061:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0062:  BCF    03.5
0063:  SWAPF  2F,W
0064:  MOVWF  77
0065:  MOVLW  F0
0066:  ANDWF  77,F
0067:  MOVF   77,W
0068:  IORWF  2E,W
0069:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003D:  MOVF   06,W
003E:  MOVWF  77
003F:  SWAPF  06,W
0040:  ANDLW  0F
0041:  MOVWF  78
....................   #endif 
0042:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0031:  SWAPF  2F,W
0032:  ANDLW  F0
0033:  MOVWF  77
0034:  MOVLW  0F
0035:  ANDWF  06,W
0036:  IORWF  77,W
0037:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0038:  NOP
....................    lcd_output_enable(1); 
0039:  BSF    06.0
....................    delay_us(2); 
003A:  GOTO   03B
....................    lcd_output_enable(0); 
003B:  BCF    06.0
003C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0043:  BSF    03.5
0044:  BCF    06.0
....................    lcd_rs_tris(); 
0045:  BCF    06.1
....................    lcd_rw_tris(); 
0046:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0047:  BCF    03.5
0048:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
006A:  MOVF   78,W
006B:  MOVWF  2E
006C:  BTFSC  2E.7
006D:  GOTO   049
....................    lcd_output_rs(address); 
006E:  BTFSS  2C.0
006F:  BCF    06.1
0070:  BTFSC  2C.0
0071:  BSF    06.1
....................    delay_cycles(1); 
0072:  NOP
....................    lcd_output_rw(0); 
0073:  BCF    06.2
....................    delay_cycles(1); 
0074:  NOP
....................    lcd_output_enable(0); 
0075:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0076:  SWAPF  2D,W
0077:  MOVWF  2E
0078:  MOVLW  0F
0079:  ANDWF  2E,F
007A:  MOVF   2E,W
007B:  MOVWF  2F
007C:  CALL   031
....................    lcd_send_nibble(n & 0xf); 
007D:  MOVF   2D,W
007E:  ANDLW  0F
007F:  MOVWF  2E
0080:  MOVWF  2F
0081:  CALL   031
0082:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0083:  MOVLW  28
0084:  MOVWF  25
0085:  MOVLW  0C
0086:  MOVWF  26
0087:  MOVLW  01
0088:  MOVWF  27
0089:  MOVLW  06
008A:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
008B:  BCF    06.0
....................    lcd_output_rs(0); 
008C:  BCF    06.1
....................    lcd_output_rw(0); 
008D:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008E:  MOVLW  0F
008F:  BSF    03.5
0090:  ANDWF  06,W
0091:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0092:  BCF    06.0
....................    lcd_rs_tris(); 
0093:  BCF    06.1
....................    lcd_rw_tris(); 
0094:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0095:  MOVLW  0F
0096:  BCF    03.5
0097:  MOVWF  29
0098:  CALL   01C
....................    for(i=1;i<=3;++i) 
0099:  MOVLW  01
009A:  MOVWF  24
009B:  MOVF   24,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0A7
....................    { 
....................        lcd_send_nibble(3); 
009F:  MOVLW  03
00A0:  MOVWF  2F
00A1:  CALL   031
....................        delay_ms(5); 
00A2:  MOVLW  05
00A3:  MOVWF  29
00A4:  CALL   01C
00A5:  INCF   24,F
00A6:  GOTO   09B
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A7:  MOVLW  02
00A8:  MOVWF  2F
00A9:  CALL   031
....................    delay_ms(5); 
00AA:  MOVLW  05
00AB:  MOVWF  29
00AC:  CALL   01C
....................    for(i=0;i<=3;++i) 
00AD:  CLRF   24
00AE:  MOVF   24,W
00AF:  SUBLW  03
00B0:  BTFSS  03.0
00B1:  GOTO   0BE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B2:  MOVLW  25
00B3:  ADDWF  24,W
00B4:  MOVWF  04
00B5:  BCF    03.7
00B6:  MOVF   00,W
00B7:  MOVWF  29
00B8:  CLRF   2C
00B9:  MOVF   29,W
00BA:  MOVWF  2D
00BB:  CALL   043
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BC:  INCF   24,F
00BD:  GOTO   0AE
00BE:  BCF    0A.3
00BF:  GOTO   19D (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C0:  DECFSZ 29,W
00C1:  GOTO   0C3
00C2:  GOTO   0C6
....................       address=LCD_LINE_TWO; 
00C3:  MOVLW  40
00C4:  MOVWF  2A
00C5:  GOTO   0C7
....................    else 
....................       address=0; 
00C6:  CLRF   2A
....................       
....................    address+=x-1; 
00C7:  MOVLW  01
00C8:  SUBWF  28,W
00C9:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
00CA:  MOVF   2A,W
00CB:  IORLW  80
00CC:  MOVWF  2B
00CD:  CLRF   2C
00CE:  MOVF   2B,W
00CF:  MOVWF  2D
00D0:  CALL   043
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D1:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D2:  MOVF   27,W
00D3:  XORLW  07
00D4:  BTFSC  03.2
00D5:  GOTO   0E0
00D6:  XORLW  0B
00D7:  BTFSC  03.2
00D8:  GOTO   0E5
00D9:  XORLW  06
00DA:  BTFSC  03.2
00DB:  GOTO   0ED
00DC:  XORLW  02
00DD:  BTFSC  03.2
00DE:  GOTO   0F3
00DF:  GOTO   0F8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E0:  MOVLW  01
00E1:  MOVWF  28
00E2:  MOVWF  29
00E3:  CALL   0C0
00E4:  GOTO   0FD
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E5:  CLRF   2C
00E6:  MOVLW  01
00E7:  MOVWF  2D
00E8:  CALL   043
....................                      delay_ms(2); 
00E9:  MOVLW  02
00EA:  MOVWF  29
00EB:  CALL   01C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00EC:  GOTO   0FD
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00ED:  MOVLW  01
00EE:  MOVWF  28
00EF:  MOVLW  02
00F0:  MOVWF  29
00F1:  CALL   0C0
00F2:  GOTO   0FD
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F3:  CLRF   2C
00F4:  MOVLW  10
00F5:  MOVWF  2D
00F6:  CALL   043
00F7:  GOTO   0FD
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F8:  MOVLW  01
00F9:  MOVWF  2C
00FA:  MOVF   27,W
00FB:  MOVWF  2D
00FC:  CALL   043
....................      #endif 
....................    } 
00FD:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use standard_io(B) 
.................... #use standard_io(A) 
....................  
.................... enum funciones{med,cal,ini}; 
....................  
.................... void medir(void){ 
.................... 	output_toggle(PIN_A2); 
*
015F:  BSF    03.5
0160:  BCF    05.2
0161:  MOVLW  04
0162:  BCF    03.5
0163:  XORWF  05,F
.................... 	output_low(PIN_A3); 
0164:  BSF    03.5
0165:  BCF    05.3
0166:  BCF    03.5
0167:  BCF    05.3
.................... 	output_low(PIN_A4); 
0168:  BSF    03.5
0169:  BCF    05.4
016A:  BCF    03.5
016B:  BCF    05.4
.................... } 
....................  
.................... void calcular(void){ 
.................... 	output_toggle(PIN_A3); 
016D:  BSF    03.5
016E:  BCF    05.3
016F:  MOVLW  08
0170:  BCF    03.5
0171:  XORWF  05,F
.................... 	output_low(PIN_A2); 
0172:  BSF    03.5
0173:  BCF    05.2
0174:  BCF    03.5
0175:  BCF    05.2
.................... 	output_low(PIN_A4); 
0176:  BSF    03.5
0177:  BCF    05.4
0178:  BCF    03.5
0179:  BCF    05.4
.................... } 
....................  
.................... void inicializar(void){ 
.................... 	output_toggle(PIN_A4); 
017B:  BSF    03.5
017C:  BCF    05.4
017D:  MOVLW  10
017E:  BCF    03.5
017F:  XORWF  05,F
.................... 	output_low(PIN_A3); 
0180:  BSF    03.5
0181:  BCF    05.3
0182:  BCF    03.5
0183:  BCF    05.3
.................... 	output_low(PIN_A2); 
0184:  BSF    03.5
0185:  BCF    05.2
0186:  BCF    03.5
0187:  BCF    05.2
.................... } 
....................  
.................... void run_func(int numfunc){ 
.................... 	switch(numfunc){ 
*
0154:  MOVF   24,W
0155:  XORLW  00
0156:  BTFSC  03.2
0157:  GOTO   15F
0158:  XORLW  01
0159:  BTFSC  03.2
015A:  GOTO   16D
015B:  XORLW  03
015C:  BTFSC  03.2
015D:  GOTO   17B
015E:  GOTO   188
.................... 		case med: 
.................... 			medir(); 
.................... 			break; 
*
016C:  GOTO   188
.................... 		case cal: 
.................... 			calcular(); 
.................... 			break; 
*
017A:  GOTO   188
.................... 		case ini: 
.................... 			inicializar(); 
.................... 			break; 
.................... 	} 
*
0188:  BCF    0A.3
0189:  GOTO   1EB (RETURN)
.................... } 
....................  
.................... void main() 
018A:  MOVF   03,W
018B:  ANDLW  1F
018C:  MOVWF  03
018D:  CLRF   21
018E:  CLRF   20
018F:  BSF    03.5
0190:  BCF    1F.4
0191:  BCF    1F.5
0192:  MOVF   1B,W
0193:  ANDLW  80
0194:  MOVWF  1B
0195:  MOVLW  07
0196:  MOVWF  1C
0197:  BCF    03.7
0198:  BCF    03.5
0199:  CLRF   22
019A:  MOVLW  03
019B:  MOVWF  23
.................... { 
....................   	 
.................... 	char item=0; 
.................... 	char n_menus = 3; 
....................   	 
.................... 	lcd_init(); 
019C:  GOTO   083
....................   	 
.................... 	printf(lcd_putc,"1) Medir"); 
019D:  MOVLW  04
019E:  BSF    03.6
019F:  MOVWF  0D
01A0:  MOVLW  00
01A1:  MOVWF  0F
01A2:  BCF    03.6
01A3:  CALL   0FE
....................   	 
.................... 	while(TRUE) 
.................... 	{ 
.................... 		if(input(PIN_A0)==1){ 
01A4:  BSF    03.5
01A5:  BSF    05.0
01A6:  BCF    03.5
01A7:  BTFSS  05.0
01A8:  GOTO   1DC
.................... 			item++; 
01A9:  INCF   22,F
.................... 			delay_ms(300); 
01AA:  MOVLW  02
01AB:  MOVWF  24
01AC:  MOVLW  96
01AD:  MOVWF  29
01AE:  CALL   01C
01AF:  DECFSZ 24,F
01B0:  GOTO   1AC
.................... 			lcd_putc('\f'); 
01B1:  MOVLW  0C
01B2:  MOVWF  27
01B3:  CALL   0D2
.................... 		  	 
.................... 			if(item>(n_menus-1)){ 
01B4:  MOVLW  01
01B5:  SUBWF  23,W
01B6:  SUBWF  22,W
01B7:  BTFSC  03.2
01B8:  GOTO   1BB
01B9:  BTFSC  03.0
.................... 				item=0; 
01BA:  CLRF   22
.................... 			} 
.................... 			  	 
.................... 			switch(item){ 
01BB:  MOVF   22,W
01BC:  BTFSC  03.2
01BD:  GOTO   1C5
01BE:  XORLW  01
01BF:  BTFSC  03.2
01C0:  GOTO   1CD
01C1:  XORLW  03
01C2:  BTFSC  03.2
01C3:  GOTO   1D5
01C4:  GOTO   1DC
.................... 				case med: 
.................... 					printf(lcd_putc,"1) Medir"); 
01C5:  MOVLW  09
01C6:  BSF    03.6
01C7:  MOVWF  0D
01C8:  MOVLW  00
01C9:  MOVWF  0F
01CA:  BCF    03.6
01CB:  CALL   0FE
.................... 					break; 
01CC:  GOTO   1DC
.................... 				case cal: 
.................... 					printf(lcd_putc,"2) Calcular"); 
01CD:  MOVLW  0E
01CE:  BSF    03.6
01CF:  MOVWF  0D
01D0:  MOVLW  00
01D1:  MOVWF  0F
01D2:  BCF    03.6
01D3:  CALL   0FE
.................... 					break; 
01D4:  GOTO   1DC
.................... 				case ini: 
.................... 					printf(lcd_putc,"3) Inicializar"); 
01D5:  MOVLW  14
01D6:  BSF    03.6
01D7:  MOVWF  0D
01D8:  MOVLW  00
01D9:  MOVWF  0F
01DA:  BCF    03.6
01DB:  CALL   0FE
.................... 					break; 
.................... 			} 
.................... 		} 
.................... 		if(input(PIN_A1)==1) 
01DC:  BSF    03.5
01DD:  BSF    05.1
01DE:  BCF    03.5
01DF:  BTFSS  05.1
01E0:  GOTO   1EB
.................... 		{ 
.................... 			delay_ms(300); 
01E1:  MOVLW  02
01E2:  MOVWF  24
01E3:  MOVLW  96
01E4:  MOVWF  29
01E5:  CALL   01C
01E6:  DECFSZ 24,F
01E7:  GOTO   1E3
.................... 			run_func(item); 
01E8:  MOVF   22,W
01E9:  MOVWF  24
01EA:  GOTO   154
.................... 		} 
01EB:  GOTO   1A4
.................... 	} 
....................  
.................... } 
01EC:  SLEEP

Configuration Fuses:
   Word  1: 3F41   NOWDT PUT XT NOMCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
