CCS PCM C Compiler, Version 5.076, 56587               05-abr.-21 17:56

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Ejercicios\Guia4\Problema 4\main.lst

               ROM used:   773 words (19%)
                           Largest free fragment is 2048
               RAM used:   23 (6%) at main() level
                           49 (13%) worst case
               Stack used: 7 locations (3 in main + 4 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2F0
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BSF    03.6
0019:  MOVF   0D,W
001A:  BCF    03.6
001B:  MOVWF  27
001C:  BSF    03.6
001D:  MOVF   0F,W
001E:  BCF    03.6
001F:  MOVWF  28
0020:  BSF    03.6
0021:  MOVF   0C,W
0022:  BCF    03.6
0023:  MOVWF  29
0024:  BSF    03.6
0025:  MOVF   0E,W
0026:  BCF    03.6
0027:  MOVWF  2A
0028:  BCF    03.7
0029:  BCF    03.5
002A:  BTFSS  0B.5
002B:  GOTO   02E
002C:  BTFSC  0B.2
002D:  GOTO   04F
002E:  MOVF   22,W
002F:  MOVWF  04
0030:  MOVF   23,W
0031:  MOVWF  77
0032:  MOVF   24,W
0033:  MOVWF  78
0034:  MOVF   25,W
0035:  MOVWF  79
0036:  MOVF   26,W
0037:  MOVWF  7A
0038:  MOVF   27,W
0039:  BSF    03.6
003A:  MOVWF  0D
003B:  BCF    03.6
003C:  MOVF   28,W
003D:  BSF    03.6
003E:  MOVWF  0F
003F:  BCF    03.6
0040:  MOVF   29,W
0041:  BSF    03.6
0042:  MOVWF  0C
0043:  BCF    03.6
0044:  MOVF   2A,W
0045:  BSF    03.6
0046:  MOVWF  0E
0047:  BCF    03.6
0048:  MOVF   2B,W
0049:  MOVWF  0A
004A:  SWAPF  21,W
004B:  MOVWF  03
004C:  SWAPF  7F,F
004D:  SWAPF  7F,W
004E:  RETFIE
004F:  BCF    0A.3
0050:  GOTO   165
.................... /* 
.................... Mostrar por 3 segundos un mensaje en el LCD que diga "Rotando mensaje en LCD 16x2". Luego mostrar el mensaje "EDI2" y moverlo  
.................... hacia la derecha hasta llegar al final de la línea. Luego mostrar el mensaje en la línea inferior y moverlo  
.................... hacia la derecha hasta llegar al final de la línea. Volver a mostrar el mensaje en la primer línea y volver a comenzar el ciclo. 
.................... */ 
....................  
.................... #include <main.h> 
.................... #include <16F88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
*
010F:  MOVF   0B,W
0110:  MOVWF  3F
0111:  BCF    0B.7
0112:  BSF    03.5
0113:  BSF    03.6
0114:  BSF    0C.7
0115:  BSF    0C.0
0116:  NOP
0117:  NOP
0118:  BCF    03.5
0119:  BCF    03.6
011A:  BTFSC  3F.7
011B:  BSF    0B.7
011C:  BSF    03.6
011D:  MOVF   0C,W
011E:  ANDLW  7F
011F:  BTFSC  03.2
0120:  GOTO   163
0121:  BCF    03.6
0122:  MOVWF  3F
0123:  BSF    03.6
0124:  MOVF   0D,W
0125:  BCF    03.6
0126:  MOVWF  40
0127:  BSF    03.6
0128:  MOVF   0F,W
0129:  BCF    03.6
012A:  MOVWF  41
012B:  MOVF   3F,W
012C:  MOVWF  42
012D:  CALL   0C3
012E:  MOVF   40,W
012F:  BSF    03.6
0130:  MOVWF  0D
0131:  BCF    03.6
0132:  MOVF   41,W
0133:  BSF    03.6
0134:  MOVWF  0F
0135:  BCF    03.6
0136:  MOVF   0B,W
0137:  MOVWF  42
0138:  BCF    0B.7
0139:  BSF    03.5
013A:  BSF    03.6
013B:  BSF    0C.7
013C:  BSF    0C.0
013D:  NOP
013E:  NOP
013F:  BCF    03.5
0140:  BCF    03.6
0141:  BTFSC  42.7
0142:  BSF    0B.7
0143:  BSF    03.6
0144:  RLF    0C,W
0145:  RLF    0E,W
0146:  ANDLW  7F
0147:  BTFSC  03.2
0148:  GOTO   163
0149:  BCF    03.6
014A:  MOVWF  3F
014B:  BSF    03.6
014C:  MOVF   0D,W
014D:  BCF    03.6
014E:  MOVWF  40
014F:  BSF    03.6
0150:  MOVF   0F,W
0151:  BCF    03.6
0152:  MOVWF  41
0153:  MOVF   3F,W
0154:  MOVWF  42
0155:  CALL   0C3
0156:  MOVF   40,W
0157:  BSF    03.6
0158:  MOVWF  0D
0159:  BCF    03.6
015A:  MOVF   41,W
015B:  BSF    03.6
015C:  MOVWF  0F
015D:  INCF   0D,F
015E:  BTFSC  03.2
015F:  INCF   0F,F
0160:  BCF    03.6
0161:  GOTO   10F
0162:  BSF    03.6
0163:  BCF    03.6
0164:  RETURN
*
0179:  DATA 0C,00
017A:  DATA D2,37
017B:  DATA F4,30
017C:  DATA 6E,32
017D:  DATA 6F,10
017E:  DATA ED,32
017F:  DATA EE,39
0180:  DATA 61,35
0181:  DATA 65,05
0182:  DATA 65,37
0183:  DATA 20,26
0184:  DATA 43,22
0185:  DATA A0,18
0186:  DATA 36,3C
0187:  DATA 32,00
0188:  DATA A0,22
0189:  DATA C4,24
018A:  DATA 32,00
018B:  DATA A0,22
018C:  DATA C4,24
018D:  DATA 32,00
018E:  DATA 8C,22
018F:  DATA C4,24
0190:  DATA 32,00
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4000000) 
*
00AE:  MOVLW  43
00AF:  MOVWF  04
00B0:  BCF    03.7
00B1:  MOVF   00,W
00B2:  BTFSC  03.2
00B3:  GOTO   0C2
00B4:  MOVLW  01
00B5:  MOVWF  78
00B6:  CLRF   77
00B7:  DECFSZ 77,F
00B8:  GOTO   0B7
00B9:  DECFSZ 78,F
00BA:  GOTO   0B6
00BB:  MOVLW  4A
00BC:  MOVWF  77
00BD:  DECFSZ 77,F
00BE:  GOTO   0BD
00BF:  GOTO   0C0
00C0:  DECFSZ 00,F
00C1:  GOTO   0B4
00C2:  RETURN
....................  
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0057:  MOVLW  0F
0058:  BSF    03.5
0059:  ANDWF  06,W
005A:  IORLW  F0
005B:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005C:  BCF    03.5
005D:  BSF    06.2
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_enable(1); 
005F:  BSF    06.0
....................    delay_cycles(1); 
0060:  NOP
....................    high = lcd_read_nibble(); 
*
0066:  MOVF   78,W
0067:  MOVWF  4A
....................        
....................    lcd_output_enable(0); 
0068:  BCF    06.0
....................    delay_cycles(1); 
0069:  NOP
....................    lcd_output_enable(1); 
006A:  BSF    06.0
....................    delay_us(1); 
006B:  NOP
....................    low = lcd_read_nibble(); 
*
0071:  MOVF   78,W
0072:  MOVWF  49
....................        
....................    lcd_output_enable(0); 
0073:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0074:  MOVLW  0F
0075:  BSF    03.5
0076:  ANDWF  06,W
0077:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0078:  BCF    03.5
0079:  SWAPF  4A,W
007A:  MOVWF  77
007B:  MOVLW  F0
007C:  ANDWF  77,F
007D:  MOVF   77,W
007E:  IORWF  49,W
007F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0061:  MOVF   06,W
0062:  MOVWF  77
0063:  SWAPF  06,W
0064:  ANDLW  0F
0065:  MOVWF  78
*
006C:  MOVF   06,W
006D:  MOVWF  77
006E:  SWAPF  06,W
006F:  ANDLW  0F
0070:  MOVWF  78
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0092:  SWAPF  4A,W
0093:  ANDLW  F0
0094:  MOVWF  77
0095:  MOVLW  0F
0096:  ANDWF  06,W
0097:  IORWF  77,W
0098:  MOVWF  06
*
00A2:  SWAPF  4A,W
00A3:  ANDLW  F0
00A4:  MOVWF  77
00A5:  MOVLW  0F
00A6:  ANDWF  06,W
00A7:  IORWF  77,W
00A8:  MOVWF  06
*
01BA:  SWAPF  4A,W
01BB:  ANDLW  F0
01BC:  MOVWF  77
01BD:  MOVLW  0F
01BE:  ANDWF  06,W
01BF:  IORWF  77,W
01C0:  MOVWF  06
*
01D2:  SWAPF  4A,W
01D3:  ANDLW  F0
01D4:  MOVWF  77
01D5:  MOVLW  0F
01D6:  ANDWF  06,W
01D7:  IORWF  77,W
01D8:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
*
0099:  NOP
*
00A9:  NOP
*
01C1:  NOP
*
01D9:  NOP
....................    lcd_output_enable(1); 
*
009A:  BSF    06.0
*
00AA:  BSF    06.0
*
01C2:  BSF    06.0
*
01DA:  BSF    06.0
....................    delay_us(2); 
*
009B:  GOTO   09C
*
00AB:  GOTO   0AC
*
01C3:  GOTO   1C4
*
01DB:  GOTO   1DC
....................    lcd_output_enable(0); 
*
009C:  BCF    06.0
*
00AC:  BCF    06.0
*
01C4:  BCF    06.0
01C5:  CLRF   2C
01C6:  BTFSC  0B.7
01C7:  BSF    2C.7
01C8:  BCF    0B.7
*
01DC:  BCF    06.0
01DD:  CLRF   2C
01DE:  BTFSC  0B.7
01DF:  BSF    2C.7
01E0:  BCF    0B.7
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0051:  BSF    03.5
0052:  BCF    06.0
....................    lcd_rs_tris(); 
0053:  BCF    06.1
....................    lcd_rw_tris(); 
0054:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0055:  BCF    03.5
0056:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0080:  MOVF   78,W
0081:  MOVWF  49
0082:  BTFSC  49.7
0083:  GOTO   057
....................    lcd_output_rs(address); 
0084:  BTFSS  47.0
0085:  BCF    06.1
0086:  BTFSC  47.0
0087:  BSF    06.1
....................    delay_cycles(1); 
0088:  NOP
....................    lcd_output_rw(0); 
0089:  BCF    06.2
....................    delay_cycles(1); 
008A:  NOP
....................    lcd_output_enable(0); 
008B:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
008C:  SWAPF  48,W
008D:  MOVWF  49
008E:  MOVLW  0F
008F:  ANDWF  49,F
0090:  MOVF   49,W
0091:  MOVWF  4A
....................    lcd_send_nibble(n & 0xf); 
*
009D:  MOVF   48,W
009E:  ANDLW  0F
009F:  MOVWF  49
00A0:  MOVF   49,W
00A1:  MOVWF  4A
*
00AD:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
0196:  MOVLW  28
0197:  MOVWF  33
0198:  MOVLW  0C
0199:  MOVWF  34
019A:  MOVLW  01
019B:  MOVWF  35
019C:  MOVLW  06
019D:  MOVWF  36
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
019E:  BCF    06.0
....................    lcd_output_rs(0); 
019F:  BCF    06.1
....................    lcd_output_rw(0); 
01A0:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01A1:  MOVLW  0F
01A2:  BSF    03.5
01A3:  ANDWF  06,W
01A4:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
01A5:  BCF    06.0
....................    lcd_rs_tris(); 
01A6:  BCF    06.1
....................    lcd_rw_tris(); 
01A7:  BCF    06.2
01A8:  BCF    03.5
01A9:  CLRF   2C
01AA:  BTFSC  0B.7
01AB:  BSF    2C.7
01AC:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
01AD:  MOVLW  0F
01AE:  MOVWF  43
01AF:  CALL   0AE
01B0:  BTFSC  2C.7
01B1:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
01B2:  MOVLW  01
01B3:  MOVWF  32
01B4:  MOVF   32,W
01B5:  SUBLW  03
01B6:  BTFSS  03.0
01B7:  GOTO   1D0
....................    { 
....................        lcd_send_nibble(3); 
01B8:  MOVLW  03
01B9:  MOVWF  4A
....................        delay_ms(5); 
*
01C9:  MOVLW  05
01CA:  MOVWF  43
01CB:  CALL   0AE
01CC:  BTFSC  2C.7
01CD:  BSF    0B.7
01CE:  INCF   32,F
01CF:  GOTO   1B4
....................    } 
....................     
....................    lcd_send_nibble(2); 
01D0:  MOVLW  02
01D1:  MOVWF  4A
....................    delay_ms(5); 
*
01E1:  MOVLW  05
01E2:  MOVWF  43
01E3:  CALL   0AE
01E4:  BTFSC  2C.7
01E5:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
01E6:  CLRF   32
01E7:  MOVF   32,W
01E8:  SUBLW  03
01E9:  BTFSS  03.0
01EA:  GOTO   1FD
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01EB:  MOVLW  33
01EC:  ADDWF  32,W
01ED:  MOVWF  04
01EE:  BCF    03.7
01EF:  MOVF   00,W
01F0:  MOVWF  37
01F1:  CLRF   2C
01F2:  BTFSC  0B.7
01F3:  BSF    2C.7
01F4:  BCF    0B.7
01F5:  CLRF   47
01F6:  MOVF   37,W
01F7:  MOVWF  48
01F8:  CALL   051
01F9:  BTFSC  2C.7
01FA:  BSF    0B.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01FB:  INCF   32,F
01FC:  GOTO   1E7
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
00D4:  DECFSZ 44,W
00D5:  GOTO   0D7
00D6:  GOTO   0DA
*
00F2:  DECFSZ 44,W
00F3:  GOTO   0F5
00F4:  GOTO   0F8
*
021B:  DECFSZ 44,W
021C:  GOTO   21E
021D:  GOTO   221
*
023E:  DECFSZ 44,W
023F:  GOTO   241
0240:  GOTO   244
*
027D:  DECFSZ 44,W
027E:  GOTO   280
027F:  GOTO   283
*
02B5:  DECFSZ 44,W
02B6:  GOTO   2B8
02B7:  GOTO   2BB
....................       address=LCD_LINE_TWO; 
*
00D7:  MOVLW  40
00D8:  MOVWF  45
00D9:  GOTO   0DB
*
00F5:  MOVLW  40
00F6:  MOVWF  45
00F7:  GOTO   0F9
*
021E:  MOVLW  40
021F:  MOVWF  45
0220:  GOTO   222
*
0241:  MOVLW  40
0242:  MOVWF  45
0243:  GOTO   245
*
0280:  MOVLW  40
0281:  MOVWF  45
0282:  GOTO   284
*
02B8:  MOVLW  40
02B9:  MOVWF  45
02BA:  GOTO   2BC
....................    else 
....................       address=0; 
*
00DA:  CLRF   45
*
00F8:  CLRF   45
*
0221:  CLRF   45
*
0244:  CLRF   45
*
0283:  CLRF   45
*
02BB:  CLRF   45
....................       
....................    address+=x-1; 
*
00DB:  MOVLW  01
00DC:  SUBWF  43,W
00DD:  ADDWF  45,F
*
00F9:  MOVLW  01
00FA:  SUBWF  43,W
00FB:  ADDWF  45,F
*
0222:  MOVLW  01
0223:  SUBWF  43,W
0224:  ADDWF  45,F
*
0245:  MOVLW  01
0246:  SUBWF  43,W
0247:  ADDWF  45,F
*
0284:  MOVLW  01
0285:  SUBWF  43,W
0286:  ADDWF  45,F
*
02BC:  MOVLW  01
02BD:  SUBWF  43,W
02BE:  ADDWF  45,F
....................    lcd_send_byte(0,0x80|address); 
*
00DE:  MOVF   45,W
00DF:  IORLW  80
00E0:  MOVWF  46
00E1:  CLRF   47
00E2:  MOVF   46,W
00E3:  MOVWF  48
00E4:  CALL   051
*
00FC:  MOVF   45,W
00FD:  IORLW  80
00FE:  MOVWF  46
00FF:  CLRF   47
0100:  MOVF   46,W
0101:  MOVWF  48
0102:  CALL   051
*
0225:  MOVF   45,W
0226:  IORLW  80
0227:  MOVWF  46
0228:  CLRF   47
0229:  MOVF   46,W
022A:  MOVWF  48
022B:  CALL   051
*
0248:  MOVF   45,W
0249:  IORLW  80
024A:  MOVWF  46
024B:  CLRF   47
024C:  MOVF   46,W
024D:  MOVWF  48
024E:  CALL   051
*
0287:  MOVF   45,W
0288:  IORLW  80
0289:  MOVWF  46
028A:  CLRF   47
028B:  MOVF   46,W
028C:  MOVWF  48
028D:  CALL   051
*
02BF:  MOVF   45,W
02C0:  IORLW  80
02C1:  MOVWF  46
02C2:  CLRF   47
02C3:  MOVF   46,W
02C4:  MOVWF  48
02C5:  CALL   051
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
00C3:  MOVF   42,W
00C4:  XORLW  07
00C5:  BTFSC  03.2
00C6:  GOTO   0D1
00C7:  XORLW  0B
00C8:  BTFSC  03.2
00C9:  GOTO   0E6
00CA:  XORLW  06
00CB:  BTFSC  03.2
00CC:  GOTO   0EE
00CD:  XORLW  02
00CE:  BTFSC  03.2
00CF:  GOTO   104
00D0:  GOTO   109
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D1:  MOVLW  01
00D2:  MOVWF  43
00D3:  MOVWF  44
*
00E5:  GOTO   10E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E6:  CLRF   47
00E7:  MOVLW  01
00E8:  MOVWF  48
00E9:  CALL   051
....................                      delay_ms(2); 
00EA:  MOVLW  02
00EB:  MOVWF  43
00EC:  CALL   0AE
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00ED:  GOTO   10E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00EE:  MOVLW  01
00EF:  MOVWF  43
00F0:  MOVLW  02
00F1:  MOVWF  44
*
0103:  GOTO   10E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0104:  CLRF   47
0105:  MOVLW  10
0106:  MOVWF  48
0107:  CALL   051
0108:  GOTO   10E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0109:  MOVLW  01
010A:  MOVWF  47
010B:  MOVF   42,W
010C:  MOVWF  48
010D:  CALL   051
....................      #endif 
....................    } 
010E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #fuses XT,NOWDT,NOMCLR 
....................  
.................... #define TMR0 0x40 //0x40 = 64 ~= 50ms 
....................  
.................... unsigned int cont=60; //Contador para saber cuantos ciclos de 50ms pasaron //60 porque 50ms por 60 son 3000ms = 3s 
.................... unsigned int ciclo; //Para controlar en que estado estamos 
.................... signed int x; //Para manejar la posicion del texto 
....................  
.................... #INT_TIMER0 
.................... void TIMER0_isr(){ 
.................... 	cont--; 
*
0165:  DECFSZ 2D,F
.................... 	if(cont==0){ //Controlamos si pasaron los 3s 
0166:  GOTO   174
.................... 		cont=60; //Reseteamos el contador, no es necesario hacerlo en el resto del programa 
0167:  MOVLW  3C
0168:  MOVWF  2D
.................... 		lcd_putc("\f"); //limpiamos la pantalla LCD 
0169:  MOVLW  79
016A:  BSF    03.6
016B:  MOVWF  0D
016C:  MOVLW  01
016D:  MOVWF  0F
016E:  BCF    03.6
016F:  CALL   10F
.................... 		ciclo=1; //cambiamos el estado 
0170:  MOVLW  01
0171:  MOVWF  2E
.................... 		x=0; //ponemos x=0 para cuando se muestre el mensaje " EDI2" se muestre la E en la primera posicion del LCD 
0172:  CLRF   2F
.................... 		disable_interrupts(INT_TIMER0); //Deshabilitamos la interrupcion despues de los 3 segundos 
0173:  BCF    0B.5
.................... 	} 
.................... 	set_timer0(TMR0); //Reseteamos el timer0 
0174:  MOVLW  40
0175:  MOVWF  01
0176:  BCF    0B.2
0177:  BCF    0A.3
0178:  GOTO   02E
.................... } 
....................  
.................... void init_cicloLCD(){ //Funcion para inicializar el programa 
.................... 	x=1; //Primera posicion del LCD 
*
0191:  MOVLW  01
0192:  MOVWF  2F
.................... 	cont=60; //Explicado en la declaracion 
0193:  MOVLW  3C
0194:  MOVWF  2D
.................... 	ciclo=0; //Primer estado 
0195:  CLRF   2E
.................... 	lcd_init(); //Inicilizamos el LCD 
....................   	 
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); //Setup del timer0 como temporizador y con un preescaler de 256 
*
01FD:  BSF    03.5
01FE:  MOVF   01,W
01FF:  ANDLW  C0
0200:  IORLW  07
0201:  MOVWF  01
.................... 	enable_interrupts(INT_TIMER0); // Habilitamos las interrupciones del timer0 
0202:  BCF    03.5
0203:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); // Habilitamos las interrupciones globales 
0204:  MOVLW  C0
0205:  IORWF  0B,F
.................... 	set_timer0(TMR0); //Seteamos el timer0 
0206:  MOVLW  40
0207:  MOVWF  01
0208:  RETURN
.................... } 
....................  
.................... void mde_cicloLCD(){ //Funcion para controlar los ciclos del LCD 
.................... 	switch(ciclo){ 
0209:  MOVF   2E,W
020A:  XORLW  00
020B:  BTFSC  03.2
020C:  GOTO   217
020D:  XORLW  01
020E:  BTFSC  03.2
020F:  GOTO   23A
0210:  XORLW  03
0211:  BTFSC  03.2
0212:  GOTO   279
0213:  XORLW  01
0214:  BTFSC  03.2
0215:  GOTO   2B0
0216:  GOTO   2ED
.................... 		case 0: //Muestra el mensaje "Rotando mensaje en LCD 16x2" utilizando las dos lineas del LCD 
.................... 			lcd_gotoxy(x,1); 
0217:  MOVF   2F,W
0218:  MOVWF  43
0219:  MOVLW  01
021A:  MOVWF  44
.................... 			printf(lcd_putc,"Rotando mensaje\nen LCD 16x2"); 
*
022C:  MOVLW  7A
022D:  BSF    03.6
022E:  MOVWF  0D
022F:  MOVLW  01
0230:  MOVWF  0F
0231:  BCF    03.6
0232:  CLRF   2C
0233:  BTFSC  0B.7
0234:  BSF    2C.7
0235:  BCF    0B.7
0236:  CALL   10F
0237:  BTFSC  2C.7
0238:  BSF    0B.7
.................... 			break; 
0239:  GOTO   2EE
.................... 		case 1: 
.................... 			lcd_gotoxy(x,1); //Arranca en el (0,1) para que no se vea el espacio 
023A:  MOVF   2F,W
023B:  MOVWF  43
023C:  MOVLW  01
023D:  MOVWF  44
.................... 			printf(lcd_putc," EDI2"); //El espacio delante es para que no se repita la E hasta el final 
*
024F:  MOVLW  88
0250:  BSF    03.6
0251:  MOVWF  0D
0252:  MOVLW  01
0253:  MOVWF  0F
0254:  BCF    03.6
0255:  CLRF   2C
0256:  BTFSC  0B.7
0257:  BSF    2C.7
0258:  BCF    0B.7
0259:  CALL   10F
025A:  BTFSC  2C.7
025B:  BSF    0B.7
.................... 			x++; //Incrementamos el valor de x para mover el texto hacia la derecha. 
025C:  INCF   2F,F
025D:  CLRF   2C
025E:  BTFSC  0B.7
025F:  BSF    2C.7
0260:  BCF    0B.7
.................... 			delay_ms(100); //Esperamos 100ms 
0261:  MOVLW  64
0262:  MOVWF  43
0263:  CALL   0AE
0264:  BTFSC  2C.7
0265:  BSF    0B.7
.................... 			if(x>12){ //Controlamos si se llegó al final de la linea 16-4=12 //-4 es por la cantidad de letras del string sin contar el espacio porque arrancamos desde 0 
0266:  BTFSC  2F.7
0267:  GOTO   278
0268:  MOVF   2F,W
0269:  SUBLW  0C
026A:  BTFSC  03.0
026B:  GOTO   278
.................... 				ciclo=2; //Cambiamos al estado siguiente 
026C:  MOVLW  02
026D:  MOVWF  2E
.................... 				x=0; //Ponemos x en 0 para que no se vea el espacio 
026E:  CLRF   2F
026F:  CLRF   2C
0270:  BTFSC  0B.7
0271:  BSF    2C.7
0272:  BCF    0B.7
.................... 				lcd_putc('\f'); //Limpiamos el LCD 
0273:  MOVLW  0C
0274:  MOVWF  42
0275:  CALL   0C3
0276:  BTFSC  2C.7
0277:  BSF    0B.7
.................... 			} 
.................... 			break; 
0278:  GOTO   2EE
.................... 		case 2: //Lo mismo que el anterior pero en la fila 2 
.................... 			lcd_gotoxy(x,2); 
0279:  MOVF   2F,W
027A:  MOVWF  43
027B:  MOVLW  02
027C:  MOVWF  44
.................... 			printf(lcd_putc," EDI2"); 
*
028E:  MOVLW  8B
028F:  BSF    03.6
0290:  MOVWF  0D
0291:  MOVLW  01
0292:  MOVWF  0F
0293:  BCF    03.6
0294:  CLRF   2C
0295:  BTFSC  0B.7
0296:  BSF    2C.7
0297:  BCF    0B.7
0298:  CALL   10F
0299:  BTFSC  2C.7
029A:  BSF    0B.7
.................... 			x++; 
029B:  INCF   2F,F
029C:  CLRF   2C
029D:  BTFSC  0B.7
029E:  BSF    2C.7
029F:  BCF    0B.7
.................... 			delay_ms(100); 
02A0:  MOVLW  64
02A1:  MOVWF  43
02A2:  CALL   0AE
02A3:  BTFSC  2C.7
02A4:  BSF    0B.7
.................... 			if(x>12){ 
02A5:  BTFSC  2F.7
02A6:  GOTO   2AF
02A7:  MOVF   2F,W
02A8:  SUBLW  0C
02A9:  BTFSC  03.0
02AA:  GOTO   2AF
.................... 				ciclo=3; 
02AB:  MOVLW  03
02AC:  MOVWF  2E
.................... 				x=1; //Ponemos x en 1 para mostrar la letra E ya que no hay espacio al inicio de la cadena 
02AD:  MOVLW  01
02AE:  MOVWF  2F
.................... 			} 
.................... 			break; 
02AF:  GOTO   2EE
.................... 		case 3: //Mostramos el mensaje "EDI2" en la primera linea, esparamos 500ms, habilitamos la interrupcion del timer0 y volvemos a comenzar el ciclo 
.................... 			ciclo=0; 
02B0:  CLRF   2E
.................... 			lcd_gotoxy(x,1); 
02B1:  MOVF   2F,W
02B2:  MOVWF  43
02B3:  MOVLW  01
02B4:  MOVWF  44
.................... 			printf(lcd_putc,"\fEDI2"); 
*
02C6:  MOVLW  8E
02C7:  BSF    03.6
02C8:  MOVWF  0D
02C9:  MOVLW  01
02CA:  MOVWF  0F
02CB:  BCF    03.6
02CC:  CLRF   2C
02CD:  BTFSC  0B.7
02CE:  BSF    2C.7
02CF:  BCF    0B.7
02D0:  CALL   10F
02D1:  BTFSC  2C.7
02D2:  BSF    0B.7
.................... 			delay_ms(500); 
02D3:  MOVLW  02
02D4:  MOVWF  32
02D5:  CLRF   2C
02D6:  BTFSC  0B.7
02D7:  BSF    2C.7
02D8:  BCF    0B.7
02D9:  MOVLW  FA
02DA:  MOVWF  43
02DB:  CALL   0AE
02DC:  BTFSC  2C.7
02DD:  BSF    0B.7
02DE:  DECFSZ 32,F
02DF:  GOTO   2D5
02E0:  CLRF   2C
02E1:  BTFSC  0B.7
02E2:  BSF    2C.7
02E3:  BCF    0B.7
.................... 			lcd_putc('\f'); 
02E4:  MOVLW  0C
02E5:  MOVWF  42
02E6:  CALL   0C3
02E7:  BTFSC  2C.7
02E8:  BSF    0B.7
.................... 			enable_interrupts(INT_TIMER0); 
02E9:  BSF    0B.5
.................... 			set_timer0(TMR0); 
02EA:  MOVLW  40
02EB:  MOVWF  01
.................... 			break; 
02EC:  GOTO   2EE
.................... 		default: //Encaso de que falle por algun motivo reinicializamos el la maquina de estado. 
.................... 			init_cicloLCD(); 
02ED:  CALL   191
.................... 			break; 
.................... 	} 
02EE:  BCF    0A.3
02EF:  GOTO   303 (RETURN)
.................... } 
....................  
.................... void main() 
02F0:  MOVF   03,W
02F1:  ANDLW  1F
02F2:  MOVWF  03
02F3:  MOVLW  3C
02F4:  MOVWF  2D
02F5:  CLRF   31
02F6:  CLRF   30
02F7:  BSF    03.5
02F8:  BCF    1F.4
02F9:  BCF    1F.5
02FA:  MOVF   1B,W
02FB:  ANDLW  80
02FC:  MOVWF  1B
02FD:  MOVLW  07
02FE:  MOVWF  1C
02FF:  BCF    03.7
.................... { 
.................... 	init_cicloLCD(); 
0300:  BCF    03.5
0301:  CALL   191
.................... 	while(TRUE) 
.................... 	{ 
.................... 		mde_cicloLCD(); 
0302:  GOTO   209
0303:  GOTO   302
.................... 	} 
.................... } 
0304:  SLEEP

Configuration Fuses:
   Word  1: 3F41   NOWDT PUT XT NOMCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
