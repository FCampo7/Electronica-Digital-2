CCS PCM C Compiler, Version 5.076, 56587               21-oct.-20 14:30

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Ejercicios\Guia4\Ejemplo 2\main.lst

               ROM used:   792 words (19%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           27 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   291
0003:  NOP
.................... #include <main.h> 
.................... #include <16F88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
0014:  DATA 0C,26
0015:  DATA E9,39
0016:  DATA F4,37
0017:  DATA 2E,17
0018:  DATA 2E,05
0019:  DATA 00,00
001A:  DATA 0C,00
001B:  DATA 8C,21
001C:  DATA 61,39
001D:  DATA BD,12
001E:  DATA 63,00
001F:  DATA 8C,21
0020:  DATA 61,39
0021:  DATA BD,12
0022:  DATA 75,00
0023:  DATA 0C,27
0024:  DATA F5,36
0025:  DATA BD,12
0026:  DATA 75,00
0027:  DATA 0C,26
0028:  DATA E9,39
0029:  DATA F4,37
002A:  DATA 2E,17
002B:  DATA 2E,05
002C:  DATA 00,00
*
0111:  MOVF   0B,W
0112:  MOVWF  28
0113:  BCF    0B.7
0114:  BSF    03.5
0115:  BSF    03.6
0116:  BSF    0C.7
0117:  BSF    0C.0
0118:  NOP
0119:  NOP
011A:  BCF    03.5
011B:  BCF    03.6
011C:  BTFSC  28.7
011D:  BSF    0B.7
011E:  BSF    03.6
011F:  MOVF   0C,W
0120:  ANDLW  7F
0121:  BTFSC  03.2
0122:  GOTO   165
0123:  BCF    03.6
0124:  MOVWF  28
0125:  BSF    03.6
0126:  MOVF   0D,W
0127:  BCF    03.6
0128:  MOVWF  29
0129:  BSF    03.6
012A:  MOVF   0F,W
012B:  BCF    03.6
012C:  MOVWF  2A
012D:  MOVF   28,W
012E:  MOVWF  2C
012F:  CALL   0E5
0130:  MOVF   29,W
0131:  BSF    03.6
0132:  MOVWF  0D
0133:  BCF    03.6
0134:  MOVF   2A,W
0135:  BSF    03.6
0136:  MOVWF  0F
0137:  BCF    03.6
0138:  MOVF   0B,W
0139:  MOVWF  2B
013A:  BCF    0B.7
013B:  BSF    03.5
013C:  BSF    03.6
013D:  BSF    0C.7
013E:  BSF    0C.0
013F:  NOP
0140:  NOP
0141:  BCF    03.5
0142:  BCF    03.6
0143:  BTFSC  2B.7
0144:  BSF    0B.7
0145:  BSF    03.6
0146:  RLF    0C,W
0147:  RLF    0E,W
0148:  ANDLW  7F
0149:  BTFSC  03.2
014A:  GOTO   165
014B:  BCF    03.6
014C:  MOVWF  28
014D:  BSF    03.6
014E:  MOVF   0D,W
014F:  BCF    03.6
0150:  MOVWF  29
0151:  BSF    03.6
0152:  MOVF   0F,W
0153:  BCF    03.6
0154:  MOVWF  2A
0155:  MOVF   28,W
0156:  MOVWF  2C
0157:  CALL   0E5
0158:  MOVF   29,W
0159:  BSF    03.6
015A:  MOVWF  0D
015B:  BCF    03.6
015C:  MOVF   2A,W
015D:  BSF    03.6
015E:  MOVWF  0F
015F:  INCF   0D,F
0160:  BTFSC  03.2
0161:  INCF   0F,F
0162:  BCF    03.6
0163:  GOTO   111
0164:  BSF    03.6
0165:  BCF    03.6
0166:  RETURN
*
01B7:  CLRF   77
01B8:  CLRF   78
01B9:  MOVF   2A,W
01BA:  BCF    03.0
01BB:  BTFSC  2B.0
01BC:  ADDWF  77,F
01BD:  RRF    77,F
01BE:  RRF    78,F
01BF:  BTFSC  2B.1
01C0:  ADDWF  77,F
01C1:  RRF    77,F
01C2:  RRF    78,F
01C3:  BTFSC  2B.2
01C4:  ADDWF  77,F
01C5:  RRF    77,F
01C6:  RRF    78,F
01C7:  BTFSC  2B.3
01C8:  ADDWF  77,F
01C9:  RRF    77,F
01CA:  RRF    78,F
01CB:  BTFSC  2B.4
01CC:  ADDWF  77,F
01CD:  RRF    77,F
01CE:  RRF    78,F
01CF:  BTFSC  2B.5
01D0:  ADDWF  77,F
01D1:  RRF    77,F
01D2:  RRF    78,F
01D3:  BTFSC  2B.6
01D4:  ADDWF  77,F
01D5:  RRF    77,F
01D6:  RRF    78,F
01D7:  BTFSC  2B.7
01D8:  ADDWF  77,F
01D9:  RRF    77,F
01DA:  RRF    78,F
*
01F0:  MOVF   0B,W
01F1:  MOVWF  29
01F2:  BCF    0B.7
01F3:  BSF    03.5
01F4:  BSF    03.6
01F5:  BSF    0C.7
01F6:  BSF    0C.0
01F7:  NOP
01F8:  NOP
01F9:  BCF    03.5
01FA:  BCF    03.6
01FB:  BTFSC  29.7
01FC:  BSF    0B.7
01FD:  BTFSC  03.0
01FE:  GOTO   227
01FF:  BSF    03.6
0200:  MOVF   0C,W
0201:  ANDLW  7F
0202:  BCF    03.6
0203:  MOVWF  29
0204:  BSF    03.6
0205:  MOVF   0D,W
0206:  BCF    03.6
0207:  MOVWF  2A
0208:  BSF    03.6
0209:  MOVF   0F,W
020A:  BCF    03.6
020B:  MOVWF  2B
020C:  MOVF   29,W
020D:  MOVWF  2C
020E:  CALL   0E5
020F:  MOVF   2A,W
0210:  BSF    03.6
0211:  MOVWF  0D
0212:  BCF    03.6
0213:  MOVF   2B,W
0214:  BSF    03.6
0215:  MOVWF  0F
0216:  BCF    03.6
0217:  MOVF   0B,W
0218:  MOVWF  2C
0219:  BCF    0B.7
021A:  BSF    03.5
021B:  BSF    03.6
021C:  BSF    0C.7
021D:  BSF    0C.0
021E:  NOP
021F:  NOP
0220:  BCF    03.5
0221:  BCF    03.6
0222:  BTFSC  2C.7
0223:  BSF    0B.7
0224:  DECFSZ 28,F
0225:  GOTO   227
0226:  GOTO   246
0227:  BSF    03.6
0228:  RLF    0C,W
0229:  RLF    0E,W
022A:  ANDLW  7F
022B:  BCF    03.6
022C:  MOVWF  29
022D:  BSF    03.6
022E:  MOVF   0D,W
022F:  BCF    03.6
0230:  MOVWF  2A
0231:  BSF    03.6
0232:  MOVF   0F,W
0233:  BCF    03.6
0234:  MOVWF  2B
0235:  MOVF   29,W
0236:  MOVWF  2C
0237:  CALL   0E5
0238:  MOVF   2A,W
0239:  BSF    03.6
023A:  MOVWF  0D
023B:  BCF    03.6
023C:  MOVF   2B,W
023D:  BSF    03.6
023E:  MOVWF  0F
023F:  INCF   0D,F
0240:  BTFSC  03.2
0241:  INCF   0F,F
0242:  BCF    03.0
0243:  BCF    03.6
0244:  DECFSZ 28,F
0245:  GOTO   1F0
0246:  RETURN
0247:  MOVF   2B,W
0248:  CLRF   78
0249:  SUBWF  2A,W
024A:  BTFSC  03.0
024B:  GOTO   24F
024C:  MOVF   2A,W
024D:  MOVWF  77
024E:  GOTO   25B
024F:  CLRF   77
0250:  MOVLW  08
0251:  MOVWF  2C
0252:  RLF    2A,F
0253:  RLF    77,F
0254:  MOVF   2B,W
0255:  SUBWF  77,W
0256:  BTFSC  03.0
0257:  MOVWF  77
0258:  RLF    78,F
0259:  DECFSZ 2C,F
025A:  GOTO   252
025B:  RETURN
025C:  MOVF   78,W
025D:  MOVF   28,W
025E:  MOVWF  2A
025F:  MOVLW  64
0260:  MOVWF  2B
0261:  CALL   247
0262:  MOVF   77,W
0263:  MOVWF  28
0264:  MOVF   78,W
0265:  MOVLW  30
0266:  BTFSS  03.2
0267:  GOTO   26F
0268:  BTFSS  29.1
0269:  GOTO   276
026A:  BTFSC  29.3
026B:  GOTO   276
026C:  BTFSC  29.4
026D:  MOVLW  20
026E:  GOTO   272
026F:  BCF    29.3
0270:  BCF    29.4
0271:  BSF    29.0
0272:  ADDWF  78,F
0273:  MOVF   78,W
0274:  MOVWF  2C
0275:  CALL   0E5
0276:  MOVF   28,W
0277:  MOVWF  2A
0278:  MOVLW  0A
0279:  MOVWF  2B
027A:  CALL   247
027B:  MOVF   77,W
027C:  MOVWF  28
027D:  MOVF   78,W
027E:  MOVLW  30
027F:  BTFSS  03.2
0280:  GOTO   287
0281:  BTFSC  29.3
0282:  GOTO   28B
0283:  BTFSS  29.0
0284:  GOTO   28B
0285:  BTFSC  29.4
0286:  MOVLW  20
0287:  ADDWF  78,F
0288:  MOVF   78,W
0289:  MOVWF  2C
028A:  CALL   0E5
028B:  MOVLW  30
028C:  ADDWF  28,F
028D:  MOVF   28,W
028E:  MOVWF  2C
028F:  CALL   0E5
0290:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4000000) 
*
002D:  MOVLW  2D
002E:  MOVWF  04
002F:  BCF    03.7
0030:  MOVF   00,W
0031:  BTFSC  03.2
0032:  GOTO   041
0033:  MOVLW  01
0034:  MOVWF  78
0035:  CLRF   77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 78,F
0039:  GOTO   035
003A:  MOVLW  4A
003B:  MOVWF  77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  GOTO   03F
003F:  DECFSZ 00,F
0040:  GOTO   033
0041:  RETURN
....................  
....................  
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP 
.................... #define use_portb_lcd TRUE 
.................... #define use_portb_kbd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
005A:  MOVLW  0F
005B:  BSF    03.5
005C:  ANDWF  06,W
005D:  IORLW  F0
005E:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005F:  BCF    03.5
0060:  BSF    06.2
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(1); 
0062:  BSF    06.0
....................    delay_cycles(1); 
0063:  NOP
....................    high = lcd_read_nibble(); 
0064:  CALL   04E
0065:  MOVF   78,W
0066:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
0067:  BCF    06.0
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(1); 
0069:  BSF    06.0
....................    delay_us(1); 
006A:  NOP
....................    low = lcd_read_nibble(); 
006B:  CALL   04E
006C:  MOVF   78,W
006D:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
006E:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006F:  MOVLW  0F
0070:  BSF    03.5
0071:  ANDWF  06,W
0072:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0073:  BCF    03.5
0074:  SWAPF  34,W
0075:  MOVWF  77
0076:  MOVLW  F0
0077:  ANDWF  77,F
0078:  MOVF   77,W
0079:  IORWF  33,W
007A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004E:  MOVF   06,W
004F:  MOVWF  77
0050:  SWAPF  06,W
0051:  ANDLW  0F
0052:  MOVWF  78
....................   #endif 
0053:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0042:  SWAPF  34,W
0043:  ANDLW  F0
0044:  MOVWF  77
0045:  MOVLW  0F
0046:  ANDWF  06,W
0047:  IORWF  77,W
0048:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0049:  NOP
....................    lcd_output_enable(1); 
004A:  BSF    06.0
....................    delay_us(2); 
004B:  GOTO   04C
....................    lcd_output_enable(0); 
004C:  BCF    06.0
004D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0054:  BSF    03.5
0055:  BCF    06.0
....................    lcd_rs_tris(); 
0056:  BCF    06.1
....................    lcd_rw_tris(); 
0057:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0058:  BCF    03.5
0059:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
007B:  MOVF   78,W
007C:  MOVWF  33
007D:  BTFSC  33.7
007E:  GOTO   05A
....................    lcd_output_rs(address); 
007F:  BTFSS  31.0
0080:  BCF    06.1
0081:  BTFSC  31.0
0082:  BSF    06.1
....................    delay_cycles(1); 
0083:  NOP
....................    lcd_output_rw(0); 
0084:  BCF    06.2
....................    delay_cycles(1); 
0085:  NOP
....................    lcd_output_enable(0); 
0086:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0087:  SWAPF  32,W
0088:  MOVWF  33
0089:  MOVLW  0F
008A:  ANDWF  33,F
008B:  MOVF   33,W
008C:  MOVWF  34
008D:  CALL   042
....................    lcd_send_nibble(n & 0xf); 
008E:  MOVF   32,W
008F:  ANDLW  0F
0090:  MOVWF  33
0091:  MOVWF  34
0092:  CALL   042
0093:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0094:  MOVLW  28
0095:  MOVWF  29
0096:  MOVLW  0C
0097:  MOVWF  2A
0098:  MOVLW  01
0099:  MOVWF  2B
009A:  MOVLW  06
009B:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
009C:  BCF    06.0
....................    lcd_output_rs(0); 
009D:  BCF    06.1
....................    lcd_output_rw(0); 
009E:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009F:  MOVLW  0F
00A0:  BSF    03.5
00A1:  ANDWF  06,W
00A2:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00A3:  BCF    06.0
....................    lcd_rs_tris(); 
00A4:  BCF    06.1
....................    lcd_rw_tris(); 
00A5:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00A6:  MOVLW  0F
00A7:  BCF    03.5
00A8:  MOVWF  2D
00A9:  CALL   02D
....................    for(i=1;i<=3;++i) 
00AA:  MOVLW  01
00AB:  MOVWF  28
00AC:  MOVF   28,W
00AD:  SUBLW  03
00AE:  BTFSS  03.0
00AF:  GOTO   0B8
....................    { 
....................        lcd_send_nibble(3); 
00B0:  MOVLW  03
00B1:  MOVWF  34
00B2:  CALL   042
....................        delay_ms(5); 
00B3:  MOVLW  05
00B4:  MOVWF  2D
00B5:  CALL   02D
00B6:  INCF   28,F
00B7:  GOTO   0AC
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B8:  MOVLW  02
00B9:  MOVWF  34
00BA:  CALL   042
....................    delay_ms(5); 
00BB:  MOVLW  05
00BC:  MOVWF  2D
00BD:  CALL   02D
....................    for(i=0;i<=3;++i) 
00BE:  CLRF   28
00BF:  MOVF   28,W
00C0:  SUBLW  03
00C1:  BTFSS  03.0
00C2:  GOTO   0CF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C3:  MOVLW  29
00C4:  ADDWF  28,W
00C5:  MOVWF  04
00C6:  BCF    03.7
00C7:  MOVF   00,W
00C8:  MOVWF  2D
00C9:  CLRF   31
00CA:  MOVF   2D,W
00CB:  MOVWF  32
00CC:  CALL   054
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CD:  INCF   28,F
00CE:  GOTO   0BF
00CF:  BCF    0A.3
00D0:  GOTO   2A5 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00D3:  DECFSZ 2E,W
00D4:  GOTO   0D6
00D5:  GOTO   0D9
....................       address=LCD_LINE_TWO; 
00D6:  MOVLW  40
00D7:  MOVWF  2F
00D8:  GOTO   0DA
....................    else 
....................       address=0; 
00D9:  CLRF   2F
....................       
....................    address+=x-1; 
00DA:  MOVLW  01
00DB:  SUBWF  2D,W
00DC:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address); 
00DD:  MOVF   2F,W
00DE:  IORLW  80
00DF:  MOVWF  30
00E0:  CLRF   31
00E1:  MOVF   30,W
00E2:  MOVWF  32
00E3:  CALL   054
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E4:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00E5:  MOVF   2C,W
00E6:  XORLW  07
00E7:  BTFSC  03.2
00E8:  GOTO   0F3
00E9:  XORLW  0B
00EA:  BTFSC  03.2
00EB:  GOTO   0F8
00EC:  XORLW  06
00ED:  BTFSC  03.2
00EE:  GOTO   100
00EF:  XORLW  02
00F0:  BTFSC  03.2
00F1:  GOTO   106
00F2:  GOTO   10B
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F3:  MOVLW  01
00F4:  MOVWF  2D
00F5:  MOVWF  2E
00F6:  CALL   0D3
00F7:  GOTO   110
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F8:  CLRF   31
00F9:  MOVLW  01
00FA:  MOVWF  32
00FB:  CALL   054
....................                      delay_ms(2); 
00FC:  MOVLW  02
00FD:  MOVWF  2D
00FE:  CALL   02D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00FF:  GOTO   110
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0100:  MOVLW  01
0101:  MOVWF  2D
0102:  MOVLW  02
0103:  MOVWF  2E
0104:  CALL   0D3
0105:  GOTO   110
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0106:  CLRF   31
0107:  MOVLW  10
0108:  MOVWF  32
0109:  CALL   054
010A:  GOTO   110
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
010B:  MOVLW  01
010C:  MOVWF  31
010D:  MOVF   2C,W
010E:  MOVWF  32
010F:  CALL   054
....................      #endif 
....................    } 
0110:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <kbd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc()  Will return a key value if pressed or /0 if not  //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
00D1:  BCF    0A.3
00D2:  GOTO   2A6 (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
029F:  BCF    03.5
02A0:  CLRF   20
....................    static int1 kbd_down; 
02A1:  BCF    21.0
....................    static char last_key; 
02A2:  CLRF   22
....................    static BYTE col; 
02A3:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
0167:  CLRF   28
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
0168:  INCF   20,F
0169:  MOVF   20,W
016A:  SUBLW  21
016B:  BTFSC  03.0
016C:  GOTO   1E8
....................        switch (col) { 
016D:  MOVF   23,W
016E:  BTFSC  03.2
016F:  GOTO   177
0170:  XORLW  01
0171:  BTFSC  03.2
0172:  GOTO   17D
0173:  XORLW  03
0174:  BTFSC  03.2
0175:  GOTO   183
0176:  GOTO   188
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
0177:  MOVLW  DE
0178:  BSF    03.5
0179:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
017A:  BCF    03.5
017B:  MOVWF  06
....................                     break; 
017C:  GOTO   188
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
017D:  MOVLW  BE
017E:  BSF    03.5
017F:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0180:  BCF    03.5
0181:  MOVWF  06
....................                     break; 
0182:  GOTO   188
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0183:  MOVLW  7E
0184:  BSF    03.5
0185:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
0186:  BCF    03.5
0187:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
0188:  BTFSS  21.0
0189:  GOTO   194
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
018A:  MOVF   06,W
018B:  ANDLW  1E
018C:  SUBLW  1E
018D:  BTFSS  03.2
018E:  GOTO   193
....................            kbd_down=FALSE; 
018F:  BCF    21.0
....................            kchar=last_key; 
0190:  MOVF   22,W
0191:  MOVWF  28
....................            last_key='\0'; 
0192:  CLRF   22
....................          } 
....................        } else { 
0193:  GOTO   1E7
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0194:  MOVF   06,W
0195:  ANDLW  1E
0196:  SUBLW  1E
0197:  BTFSC  03.2
0198:  GOTO   1E2
....................              if((kbd & ROW0)==0) 
0199:  MOVF   06,W
019A:  ANDLW  02
019B:  BTFSS  03.2
019C:  GOTO   19F
....................                row=0; 
019D:  CLRF   29
019E:  GOTO   1B3
....................              else if((kbd & ROW1)==0) 
019F:  MOVF   06,W
01A0:  ANDLW  04
01A1:  BTFSS  03.2
01A2:  GOTO   1A6
....................                row=1; 
01A3:  MOVLW  01
01A4:  MOVWF  29
01A5:  GOTO   1B3
....................              else if((kbd & ROW2)==0) 
01A6:  MOVF   06,W
01A7:  ANDLW  08
01A8:  BTFSS  03.2
01A9:  GOTO   1AD
....................                row=2; 
01AA:  MOVLW  02
01AB:  MOVWF  29
01AC:  GOTO   1B3
....................              else if((kbd & ROW3)==0) 
01AD:  MOVF   06,W
01AE:  ANDLW  10
01AF:  BTFSS  03.2
01B0:  GOTO   1B3
....................                row=3; 
01B1:  MOVLW  03
01B2:  MOVWF  29
....................              last_key =KEYS[row][col]; 
01B3:  MOVF   29,W
01B4:  MOVWF  2A
01B5:  MOVLW  03
01B6:  MOVWF  2B
*
01DB:  MOVF   23,W
01DC:  ADDWF  78,W
01DD:  CALL   004
01DE:  MOVWF  78
01DF:  MOVWF  22
....................              kbd_down = TRUE; 
01E0:  BSF    21.0
....................           } else { 
01E1:  GOTO   1E7
....................              ++col; 
01E2:  INCF   23,F
....................              if(col==3) 
01E3:  MOVF   23,W
01E4:  SUBLW  03
01E5:  BTFSC  03.2
....................                col=0; 
01E6:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
01E7:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
01E8:  MOVLW  FE
01E9:  BSF    03.5
01EA:  MOVWF  06
....................   return(kchar); 
01EB:  BCF    03.5
01EC:  MOVF   28,W
01ED:  MOVWF  78
01EE:  BCF    0A.3
01EF:  GOTO   2B1 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
0291:  MOVF   03,W
0292:  ANDLW  1F
0293:  MOVWF  03
0294:  CLRF   25
0295:  CLRF   24
0296:  BSF    03.5
0297:  BCF    1F.4
0298:  BCF    1F.5
0299:  MOVF   1B,W
029A:  ANDLW  80
029B:  MOVWF  1B
029C:  MOVLW  07
029D:  MOVWF  1C
029E:  BCF    03.7
.................... { 
.................... 	char k; 
.................... 	int x; 
....................   	 
.................... 	lcd_init(); 
*
02A4:  GOTO   094
.................... 	kbd_init(); 
02A5:  GOTO   0D1
....................   	 
.................... 	port_b_pullups(TRUE); 
02A6:  BSF    03.5
02A7:  BCF    01.7
....................   	 
.................... 	lcd_putc("\fListo...\n"); 
02A8:  MOVLW  14
02A9:  BCF    03.5
02AA:  BSF    03.6
02AB:  MOVWF  0D
02AC:  MOVLW  00
02AD:  MOVWF  0F
02AE:  BCF    03.6
02AF:  CALL   111
....................   	 
.................... 	while(TRUE) 
.................... 	{ 
.................... 		k=kbd_getc(); 
02B0:  GOTO   167
02B1:  MOVF   78,W
02B2:  MOVWF  26
.................... 		x=k-48; 
02B3:  MOVLW  30
02B4:  SUBWF  26,W
02B5:  MOVWF  27
.................... 	  	 
.................... 		if(k!=0){ 
02B6:  MOVF   26,F
02B7:  BTFSC  03.2
02B8:  GOTO   316
.................... 			if(k=='*') 
02B9:  MOVF   26,W
02BA:  SUBLW  2A
02BB:  BTFSS  03.2
02BC:  GOTO   2C5
.................... 				lcd_putc("\f"); 
02BD:  MOVLW  1A
02BE:  BSF    03.6
02BF:  MOVWF  0D
02C0:  MOVLW  00
02C1:  MOVWF  0F
02C2:  BCF    03.6
02C3:  CALL   111
02C4:  GOTO   316
.................... 			else { 
.................... 				lcd_putc(k); 
02C5:  MOVF   26,W
02C6:  MOVWF  2C
02C7:  CALL   0E5
.................... 				delay_ms(500); 
02C8:  MOVLW  02
02C9:  MOVWF  28
02CA:  MOVLW  FA
02CB:  MOVWF  2D
02CC:  CALL   02D
02CD:  DECFSZ 28,F
02CE:  GOTO   2CA
.................... 			  	 
.................... 				printf(lcd_putc,"\fCar=%c",k); 
02CF:  MOVLW  1B
02D0:  BSF    03.6
02D1:  MOVWF  0D
02D2:  MOVLW  00
02D3:  MOVWF  0F
02D4:  BCF    03.0
02D5:  MOVLW  05
02D6:  BCF    03.6
02D7:  MOVWF  28
02D8:  CALL   1F0
02D9:  MOVF   26,W
02DA:  MOVWF  2C
02DB:  CALL   0E5
.................... 				delay_ms(500); 
02DC:  MOVLW  02
02DD:  MOVWF  28
02DE:  MOVLW  FA
02DF:  MOVWF  2D
02E0:  CALL   02D
02E1:  DECFSZ 28,F
02E2:  GOTO   2DE
.................... 			  	 
.................... 				printf(lcd_putc,"\fCar=%u",k); 
02E3:  MOVLW  1F
02E4:  BSF    03.6
02E5:  MOVWF  0D
02E6:  MOVLW  00
02E7:  MOVWF  0F
02E8:  BCF    03.0
02E9:  MOVLW  05
02EA:  BCF    03.6
02EB:  MOVWF  28
02EC:  CALL   1F0
02ED:  MOVF   26,W
02EE:  MOVWF  28
02EF:  MOVLW  1B
02F0:  MOVWF  29
02F1:  CALL   25C
.................... 				delay_ms(500); 
02F2:  MOVLW  02
02F3:  MOVWF  28
02F4:  MOVLW  FA
02F5:  MOVWF  2D
02F6:  CALL   02D
02F7:  DECFSZ 28,F
02F8:  GOTO   2F4
.................... 			  	 
.................... 				printf(lcd_putc,"\fNum=%u",x); 
02F9:  MOVLW  23
02FA:  BSF    03.6
02FB:  MOVWF  0D
02FC:  MOVLW  00
02FD:  MOVWF  0F
02FE:  BCF    03.0
02FF:  MOVLW  05
0300:  BCF    03.6
0301:  MOVWF  28
0302:  CALL   1F0
0303:  MOVF   27,W
0304:  MOVWF  28
0305:  MOVLW  1B
0306:  MOVWF  29
0307:  CALL   25C
.................... 				delay_ms(500); 
0308:  MOVLW  02
0309:  MOVWF  28
030A:  MOVLW  FA
030B:  MOVWF  2D
030C:  CALL   02D
030D:  DECFSZ 28,F
030E:  GOTO   30A
.................... 			  	 
.................... 				lcd_putc("\fListo...\n"); 
030F:  MOVLW  27
0310:  BSF    03.6
0311:  MOVWF  0D
0312:  MOVLW  00
0313:  MOVWF  0F
0314:  BCF    03.6
0315:  CALL   111
.................... 			} 
.................... 		} 
0316:  GOTO   2B0
.................... 	} 
....................  
.................... } 
0317:  SLEEP

Configuration Fuses:
   Word  1: 3F61   NOWDT PUT XT MCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
