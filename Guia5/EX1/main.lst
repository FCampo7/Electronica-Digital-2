CCS PCM C Compiler, Version 5.076, 56587               20-Oct-20 15:28

               Filename:   D:\Ezequiel\My eBooks\Favaloro\ED\II\GUIA 5\EX1\main.lst

               ROM used:   1261 words (31%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           37 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   45C
0003:  NOP
.................... #include <16f88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
0004:  DATA 8C,20
0005:  DATA C4,21
0006:  DATA A0,1E
0007:  DATA A0,12
0008:  DATA 34,36
0009:  DATA 64,00
000A:  DATA 0A,2B
000B:  DATA 6F,36
000C:  DATA F4,30
000D:  DATA E7,32
000E:  DATA A0,1E
000F:  DATA A0,12
0010:  DATA B0,18
0011:  DATA 2E,19
0012:  DATA 66,2B
0013:  DATA 00,11
*
00B8:  MOVLW  8E
00B9:  MOVWF  77
00BA:  MOVF   28,W
00BB:  MOVWF  78
00BC:  MOVF   27,W
00BD:  MOVWF  79
00BE:  CLRF   7A
00BF:  MOVF   78,F
00C0:  BTFSS  03.2
00C1:  GOTO   0CC
00C2:  MOVF   79,W
00C3:  MOVWF  78
00C4:  CLRF   79
00C5:  MOVLW  08
00C6:  SUBWF  77,F
00C7:  MOVF   78,F
00C8:  BTFSS  03.2
00C9:  GOTO   0CC
00CA:  CLRF   77
00CB:  GOTO   0D4
00CC:  BCF    03.0
00CD:  BTFSC  78.7
00CE:  GOTO   0D3
00CF:  RLF    79,F
00D0:  RLF    78,F
00D1:  DECF   77,F
00D2:  GOTO   0CC
00D3:  BCF    78.7
00D4:  BCF    0A.3
00D5:  GOTO   490 (RETURN)
00D6:  MOVF   34,W
00D7:  BTFSC  03.2
00D8:  GOTO   146
00D9:  MOVWF  3C
00DA:  MOVF   38,W
00DB:  BTFSC  03.2
00DC:  GOTO   146
00DD:  ADDWF  3C,F
00DE:  BTFSC  03.0
00DF:  GOTO   0E7
00E0:  MOVLW  7F
00E1:  SUBWF  3C,F
00E2:  BTFSS  03.0
00E3:  GOTO   146
00E4:  BTFSC  03.2
00E5:  GOTO   146
00E6:  GOTO   0EB
00E7:  MOVLW  81
00E8:  ADDWF  3C,F
00E9:  BTFSC  03.0
00EA:  GOTO   146
00EB:  MOVF   3C,W
00EC:  MOVWF  77
00ED:  CLRF   78
00EE:  CLRF   79
00EF:  CLRF   7A
00F0:  MOVF   35,W
00F1:  MOVWF  40
00F2:  BSF    40.7
00F3:  MOVF   36,W
00F4:  MOVWF  3F
00F5:  MOVF   37,W
00F6:  MOVWF  3E
00F7:  MOVLW  18
00F8:  MOVWF  3C
00F9:  CLRF   3D
00FA:  BTFSS  3E.0
00FB:  GOTO   114
00FC:  MOVF   3B,W
00FD:  ADDWF  7A,F
00FE:  BTFSS  03.0
00FF:  GOTO   106
0100:  INCF   79,F
0101:  BTFSS  03.2
0102:  GOTO   106
0103:  INCF   78,F
0104:  BTFSC  03.2
0105:  BSF    3D.7
0106:  MOVF   3A,W
0107:  ADDWF  79,F
0108:  BTFSS  03.0
0109:  GOTO   10D
010A:  INCF   78,F
010B:  BTFSC  03.2
010C:  BSF    3D.7
010D:  MOVF   39,W
010E:  MOVWF  36
010F:  BSF    36.7
0110:  MOVF   36,W
0111:  ADDWF  78,F
0112:  BTFSC  03.0
0113:  BSF    3D.7
0114:  RLF    3D,F
0115:  RRF    78,F
0116:  RRF    79,F
0117:  RRF    7A,F
0118:  RRF    40,F
0119:  RRF    3F,F
011A:  RRF    3E,F
011B:  BCF    03.0
011C:  DECFSZ 3C,F
011D:  GOTO   0F9
011E:  MOVLW  01
011F:  ADDWF  77,F
0120:  BTFSC  03.0
0121:  GOTO   146
0122:  BTFSC  78.7
0123:  GOTO   12B
0124:  RLF    40,F
0125:  RLF    7A,F
0126:  RLF    79,F
0127:  RLF    78,F
0128:  DECF   77,F
0129:  BTFSC  03.2
012A:  GOTO   146
012B:  BTFSS  40.7
012C:  GOTO   13C
012D:  INCF   7A,F
012E:  BTFSS  03.2
012F:  GOTO   13C
0130:  INCF   79,F
0131:  BTFSS  03.2
0132:  GOTO   13C
0133:  INCF   78,F
0134:  BTFSS  03.2
0135:  GOTO   13C
0136:  RRF    78,F
0137:  RRF    79,F
0138:  RRF    7A,F
0139:  INCF   77,F
013A:  BTFSC  03.2
013B:  GOTO   146
013C:  MOVF   35,W
013D:  MOVWF  3D
013E:  MOVF   39,W
013F:  XORWF  3D,F
0140:  BTFSS  3D.7
0141:  GOTO   144
0142:  BSF    78.7
0143:  GOTO   14A
0144:  BCF    78.7
0145:  GOTO   14A
0146:  CLRF   77
0147:  CLRF   78
0148:  CLRF   79
0149:  CLRF   7A
014A:  RETURN
014B:  MOVF   2B,W
014C:  BTFSC  03.2
014D:  GOTO   210
014E:  MOVWF  37
014F:  MOVF   2F,W
0150:  BTFSC  03.2
0151:  GOTO   210
0152:  SUBWF  37,F
0153:  BTFSS  03.0
0154:  GOTO   15A
0155:  MOVLW  7F
0156:  ADDWF  37,F
0157:  BTFSC  03.0
0158:  GOTO   210
0159:  GOTO   160
015A:  MOVLW  81
015B:  SUBWF  37,F
015C:  BTFSS  03.0
015D:  GOTO   210
015E:  BTFSC  03.2
015F:  GOTO   210
0160:  MOVF   37,W
0161:  MOVWF  77
0162:  CLRF   78
0163:  CLRF   79
0164:  CLRF   7A
0165:  CLRF   36
0166:  MOVF   2C,W
0167:  MOVWF  35
0168:  BSF    35.7
0169:  MOVF   2D,W
016A:  MOVWF  34
016B:  MOVF   2E,W
016C:  MOVWF  33
016D:  MOVLW  19
016E:  MOVWF  37
016F:  MOVF   32,W
0170:  SUBWF  33,F
0171:  BTFSC  03.0
0172:  GOTO   183
0173:  MOVLW  01
0174:  SUBWF  34,F
0175:  BTFSC  03.0
0176:  GOTO   183
0177:  SUBWF  35,F
0178:  BTFSC  03.0
0179:  GOTO   183
017A:  SUBWF  36,F
017B:  BTFSC  03.0
017C:  GOTO   183
017D:  INCF   36,F
017E:  INCF   35,F
017F:  INCF   34,F
0180:  MOVF   32,W
0181:  ADDWF  33,F
0182:  GOTO   1B5
0183:  MOVF   31,W
0184:  SUBWF  34,F
0185:  BTFSC  03.0
0186:  GOTO   19E
0187:  MOVLW  01
0188:  SUBWF  35,F
0189:  BTFSC  03.0
018A:  GOTO   19E
018B:  SUBWF  36,F
018C:  BTFSC  03.0
018D:  GOTO   19E
018E:  INCF   36,F
018F:  INCF   35,F
0190:  MOVF   31,W
0191:  ADDWF  34,F
0192:  MOVF   32,W
0193:  ADDWF  33,F
0194:  BTFSS  03.0
0195:  GOTO   1B5
0196:  INCF   34,F
0197:  BTFSS  03.2
0198:  GOTO   1B5
0199:  INCF   35,F
019A:  BTFSS  03.2
019B:  GOTO   1B5
019C:  INCF   36,F
019D:  GOTO   1B5
019E:  MOVF   30,W
019F:  IORLW  80
01A0:  SUBWF  35,F
01A1:  BTFSC  03.0
01A2:  GOTO   1B4
01A3:  MOVLW  01
01A4:  SUBWF  36,F
01A5:  BTFSC  03.0
01A6:  GOTO   1B4
01A7:  INCF   36,F
01A8:  MOVF   30,W
01A9:  IORLW  80
01AA:  ADDWF  35,F
01AB:  MOVF   31,W
01AC:  ADDWF  34,F
01AD:  BTFSS  03.0
01AE:  GOTO   192
01AF:  INCF   35,F
01B0:  BTFSS  03.2
01B1:  GOTO   192
01B2:  INCF   36,F
01B3:  GOTO   192
01B4:  BSF    7A.0
01B5:  DECFSZ 37,F
01B6:  GOTO   1B8
01B7:  GOTO   1C3
01B8:  BCF    03.0
01B9:  RLF    33,F
01BA:  RLF    34,F
01BB:  RLF    35,F
01BC:  RLF    36,F
01BD:  BCF    03.0
01BE:  RLF    7A,F
01BF:  RLF    79,F
01C0:  RLF    78,F
01C1:  RLF    38,F
01C2:  GOTO   16F
01C3:  BTFSS  38.0
01C4:  GOTO   1CB
01C5:  BCF    03.0
01C6:  RRF    78,F
01C7:  RRF    79,F
01C8:  RRF    7A,F
01C9:  RRF    38,F
01CA:  GOTO   1CE
01CB:  DECF   77,F
01CC:  BTFSC  03.2
01CD:  GOTO   210
01CE:  BTFSC  38.7
01CF:  GOTO   1F7
01D0:  BCF    03.0
01D1:  RLF    33,F
01D2:  RLF    34,F
01D3:  RLF    35,F
01D4:  RLF    36,F
01D5:  MOVF   32,W
01D6:  SUBWF  33,F
01D7:  BTFSC  03.0
01D8:  GOTO   1E3
01D9:  MOVLW  01
01DA:  SUBWF  34,F
01DB:  BTFSC  03.0
01DC:  GOTO   1E3
01DD:  SUBWF  35,F
01DE:  BTFSC  03.0
01DF:  GOTO   1E3
01E0:  SUBWF  36,F
01E1:  BTFSS  03.0
01E2:  GOTO   206
01E3:  MOVF   31,W
01E4:  SUBWF  34,F
01E5:  BTFSC  03.0
01E6:  GOTO   1EE
01E7:  MOVLW  01
01E8:  SUBWF  35,F
01E9:  BTFSC  03.0
01EA:  GOTO   1EE
01EB:  SUBWF  36,F
01EC:  BTFSS  03.0
01ED:  GOTO   206
01EE:  MOVF   30,W
01EF:  IORLW  80
01F0:  SUBWF  35,F
01F1:  BTFSC  03.0
01F2:  GOTO   1F7
01F3:  MOVLW  01
01F4:  SUBWF  36,F
01F5:  BTFSS  03.0
01F6:  GOTO   206
01F7:  INCF   7A,F
01F8:  BTFSS  03.2
01F9:  GOTO   206
01FA:  INCF   79,F
01FB:  BTFSS  03.2
01FC:  GOTO   206
01FD:  INCF   78,F
01FE:  BTFSS  03.2
01FF:  GOTO   206
0200:  INCF   77,F
0201:  BTFSC  03.2
0202:  GOTO   210
0203:  RRF    78,F
0204:  RRF    79,F
0205:  RRF    7A,F
0206:  MOVF   2C,W
0207:  MOVWF  37
0208:  MOVF   30,W
0209:  XORWF  37,F
020A:  BTFSS  37.7
020B:  GOTO   20E
020C:  BSF    78.7
020D:  GOTO   214
020E:  BCF    78.7
020F:  GOTO   214
0210:  CLRF   77
0211:  CLRF   78
0212:  CLRF   79
0213:  CLRF   7A
0214:  BCF    0A.3
0215:  GOTO   4B5 (RETURN)
*
0254:  MOVF   0B,W
0255:  MOVWF  28
0256:  BCF    0B.7
0257:  BSF    03.5
0258:  BSF    03.6
0259:  BSF    0C.7
025A:  BSF    0C.0
025B:  NOP
025C:  NOP
025D:  BCF    03.5
025E:  BCF    03.6
025F:  BTFSC  28.7
0260:  BSF    0B.7
0261:  BTFSC  03.0
0262:  GOTO   28B
0263:  BSF    03.6
0264:  MOVF   0C,W
0265:  ANDLW  7F
0266:  BCF    03.6
0267:  MOVWF  28
0268:  BSF    03.6
0269:  MOVF   0D,W
026A:  BCF    03.6
026B:  MOVWF  29
026C:  BSF    03.6
026D:  MOVF   0F,W
026E:  BCF    03.6
026F:  MOVWF  2A
0270:  MOVF   28,W
0271:  MOVWF  34
0272:  CALL   228
0273:  MOVF   29,W
0274:  BSF    03.6
0275:  MOVWF  0D
0276:  BCF    03.6
0277:  MOVF   2A,W
0278:  BSF    03.6
0279:  MOVWF  0F
027A:  BCF    03.6
027B:  MOVF   0B,W
027C:  MOVWF  2B
027D:  BCF    0B.7
027E:  BSF    03.5
027F:  BSF    03.6
0280:  BSF    0C.7
0281:  BSF    0C.0
0282:  NOP
0283:  NOP
0284:  BCF    03.5
0285:  BCF    03.6
0286:  BTFSC  2B.7
0287:  BSF    0B.7
0288:  DECFSZ 27,F
0289:  GOTO   28B
028A:  GOTO   2AA
028B:  BSF    03.6
028C:  RLF    0C,W
028D:  RLF    0E,W
028E:  ANDLW  7F
028F:  BCF    03.6
0290:  MOVWF  28
0291:  BSF    03.6
0292:  MOVF   0D,W
0293:  BCF    03.6
0294:  MOVWF  29
0295:  BSF    03.6
0296:  MOVF   0F,W
0297:  BCF    03.6
0298:  MOVWF  2A
0299:  MOVF   28,W
029A:  MOVWF  34
029B:  CALL   228
029C:  MOVF   29,W
029D:  BSF    03.6
029E:  MOVWF  0D
029F:  BCF    03.6
02A0:  MOVF   2A,W
02A1:  BSF    03.6
02A2:  MOVWF  0F
02A3:  INCF   0D,F
02A4:  BTFSC  03.2
02A5:  INCF   0F,F
02A6:  BCF    03.0
02A7:  BCF    03.6
02A8:  DECFSZ 27,F
02A9:  GOTO   254
02AA:  RETURN
02AB:  CLRF   2F
02AC:  MOVF   04,W
02AD:  MOVWF  2E
02AE:  BCF    2F.0
02AF:  BTFSC  03.7
02B0:  BSF    2F.0
02B1:  BTFSS  28.7
02B2:  GOTO   2BB
02B3:  BSF    2E.7
02B4:  BTFSS  2E.4
02B5:  INCF   2E,F
02B6:  COMF   27,F
02B7:  COMF   28,F
02B8:  INCF   27,F
02B9:  BTFSC  03.2
02BA:  INCF   28,F
02BB:  SWAPF  28,W
02BC:  IORLW  F0
02BD:  MOVWF  2A
02BE:  ADDWF  2A,F
02BF:  ADDLW  E2
02C0:  MOVWF  2B
02C1:  ADDLW  32
02C2:  MOVWF  2D
02C3:  MOVF   28,W
02C4:  ANDLW  0F
02C5:  ADDWF  2B,F
02C6:  ADDWF  2B,F
02C7:  ADDWF  2D,F
02C8:  ADDLW  E9
02C9:  MOVWF  2C
02CA:  ADDWF  2C,F
02CB:  ADDWF  2C,F
02CC:  SWAPF  27,W
02CD:  ANDLW  0F
02CE:  ADDWF  2C,F
02CF:  ADDWF  2D,F
02D0:  RLF    2C,F
02D1:  RLF    2D,F
02D2:  COMF   2D,F
02D3:  RLF    2D,F
02D4:  MOVF   27,W
02D5:  ANDLW  0F
02D6:  ADDWF  2D,F
02D7:  RLF    2A,F
02D8:  MOVLW  07
02D9:  MOVWF  29
02DA:  MOVLW  0A
02DB:  ADDWF  2D,F
02DC:  DECF   2C,F
02DD:  BTFSS  03.0
02DE:  GOTO   2DB
02DF:  ADDWF  2C,F
02E0:  DECF   2B,F
02E1:  BTFSS  03.0
02E2:  GOTO   2DF
02E3:  ADDWF  2B,F
02E4:  DECF   2A,F
02E5:  BTFSS  03.0
02E6:  GOTO   2E3
02E7:  ADDWF  2A,F
02E8:  DECF   29,F
02E9:  BTFSS  03.0
02EA:  GOTO   2E7
02EB:  MOVLW  29
02EC:  MOVWF  04
02ED:  BCF    03.7
02EE:  MOVLW  07
02EF:  ANDWF  2E,W
02F0:  BCF    2E.6
02F1:  DECF   04,F
02F2:  ANDWF  2E,W
02F3:  BTFSS  03.2
02F4:  GOTO   2FC
02F5:  BTFSC  2E.4
02F6:  INCF   04,F
02F7:  BTFSC  2E.4
02F8:  GOTO   2FC
02F9:  MOVLW  20
02FA:  MOVWF  77
02FB:  GOTO   319
02FC:  ADDWF  04,F
02FD:  MOVLW  2D
02FE:  SUBWF  04,W
02FF:  BTFSC  03.2
0300:  BSF    2E.6
0301:  MOVF   00,W
0302:  MOVWF  77
0303:  BTFSS  03.2
0304:  GOTO   30D
0305:  BTFSC  2E.6
0306:  GOTO   30D
0307:  BTFSC  2E.4
0308:  GOTO   327
0309:  BTFSC  2E.3
030A:  GOTO   30D
030B:  MOVLW  20
030C:  GOTO   318
030D:  BTFSS  2E.7
030E:  GOTO   315
030F:  MOVLW  2D
0310:  MOVWF  77
0311:  DECF   04,F
0312:  BCF    2E.6
0313:  BCF    2E.7
0314:  GOTO   319
0315:  BSF    2E.3
0316:  BCF    2E.4
0317:  MOVLW  30
0318:  ADDWF  77,F
0319:  CLRF   28
031A:  MOVF   04,W
031B:  MOVWF  27
031C:  BCF    28.0
031D:  BTFSC  03.7
031E:  BSF    28.0
031F:  MOVF   77,W
0320:  MOVWF  34
0321:  CALL   228
0322:  MOVF   27,W
0323:  MOVWF  04
0324:  BCF    03.7
0325:  BTFSC  28.0
0326:  BSF    03.7
0327:  INCF   04,F
0328:  BTFSS  2E.6
0329:  GOTO   2FD
032A:  BCF    0A.3
032B:  GOTO   4CE (RETURN)
032C:  BTFSC  03.1
032D:  GOTO   331
032E:  MOVLW  3C
032F:  MOVWF  04
0330:  BCF    03.7
0331:  CLRF   77
0332:  CLRF   78
0333:  CLRF   79
0334:  CLRF   7A
0335:  CLRF   3C
0336:  CLRF   3D
0337:  CLRF   3E
0338:  CLRF   3F
0339:  MOVF   3B,W
033A:  IORWF  3A,W
033B:  IORWF  39,W
033C:  IORWF  38,W
033D:  BTFSC  03.2
033E:  GOTO   36F
033F:  MOVLW  20
0340:  MOVWF  40
0341:  BCF    03.0
0342:  RLF    34,F
0343:  RLF    35,F
0344:  RLF    36,F
0345:  RLF    37,F
0346:  RLF    3C,F
0347:  RLF    3D,F
0348:  RLF    3E,F
0349:  RLF    3F,F
034A:  MOVF   3B,W
034B:  SUBWF  3F,W
034C:  BTFSS  03.2
034D:  GOTO   358
034E:  MOVF   3A,W
034F:  SUBWF  3E,W
0350:  BTFSS  03.2
0351:  GOTO   358
0352:  MOVF   39,W
0353:  SUBWF  3D,W
0354:  BTFSS  03.2
0355:  GOTO   358
0356:  MOVF   38,W
0357:  SUBWF  3C,W
0358:  BTFSS  03.0
0359:  GOTO   369
035A:  MOVF   38,W
035B:  SUBWF  3C,F
035C:  MOVF   39,W
035D:  BTFSS  03.0
035E:  INCFSZ 39,W
035F:  SUBWF  3D,F
0360:  MOVF   3A,W
0361:  BTFSS  03.0
0362:  INCFSZ 3A,W
0363:  SUBWF  3E,F
0364:  MOVF   3B,W
0365:  BTFSS  03.0
0366:  INCFSZ 3B,W
0367:  SUBWF  3F,F
0368:  BSF    03.0
0369:  RLF    77,F
036A:  RLF    78,F
036B:  RLF    79,F
036C:  RLF    7A,F
036D:  DECFSZ 40,F
036E:  GOTO   341
036F:  MOVF   3C,W
0370:  MOVWF  00
0371:  INCF   04,F
0372:  MOVF   3D,W
0373:  MOVWF  00
0374:  INCF   04,F
0375:  MOVF   3E,W
0376:  MOVWF  00
0377:  INCF   04,F
0378:  MOVF   3F,W
0379:  MOVWF  00
037A:  RETURN
037B:  MOVF   04,W
037C:  MOVWF  2C
037D:  MOVF   2B,W
037E:  MOVWF  2E
037F:  BTFSC  03.2
0380:  GOTO   39A
0381:  MOVF   2A,W
0382:  MOVWF  37
0383:  MOVF   29,W
0384:  MOVWF  36
0385:  MOVF   28,W
0386:  MOVWF  35
0387:  MOVF   27,W
0388:  MOVWF  34
0389:  CLRF   3B
038A:  CLRF   3A
038B:  MOVLW  20
038C:  MOVWF  39
038D:  MOVLW  82
038E:  MOVWF  38
038F:  CALL   0D6
0390:  MOVF   7A,W
0391:  MOVWF  2A
0392:  MOVF   79,W
0393:  MOVWF  29
0394:  MOVF   78,W
0395:  MOVWF  28
0396:  MOVF   77,W
0397:  MOVWF  27
0398:  DECFSZ 2E,F
0399:  GOTO   381
039A:  MOVF   2A,W
039B:  MOVWF  37
039C:  MOVF   29,W
039D:  MOVWF  36
039E:  MOVF   28,W
039F:  MOVWF  35
03A0:  MOVF   27,W
03A1:  MOVWF  34
03A2:  MOVF   34,W
03A3:  SUBLW  B6
03A4:  MOVWF  34
03A5:  CLRF   7A
03A6:  MOVF   35,W
03A7:  MOVWF  38
03A8:  BSF    35.7
03A9:  BCF    03.0
03AA:  RRF    35,F
03AB:  RRF    36,F
03AC:  RRF    37,F
03AD:  RRF    7A,F
03AE:  RRF    79,F
03AF:  RRF    78,F
03B0:  RRF    77,F
03B1:  DECFSZ 34,F
03B2:  GOTO   3A9
03B3:  BTFSS  38.7
03B4:  GOTO   3C0
03B5:  COMF   77,F
03B6:  COMF   78,F
03B7:  COMF   79,F
03B8:  COMF   7A,F
03B9:  INCF   77,F
03BA:  BTFSC  03.2
03BB:  INCF   78,F
03BC:  BTFSC  03.2
03BD:  INCF   79,F
03BE:  BTFSC  03.2
03BF:  INCF   7A,F
03C0:  MOVF   7A,W
03C1:  MOVWF  2A
03C2:  MOVF   79,W
03C3:  MOVWF  29
03C4:  MOVF   78,W
03C5:  MOVWF  28
03C6:  MOVF   77,W
03C7:  MOVWF  27
03C8:  BTFSS  2A.7
03C9:  GOTO   3D7
03CA:  DECF   2C,F
03CB:  BSF    2C.5
03CC:  COMF   27,F
03CD:  COMF   28,F
03CE:  COMF   29,F
03CF:  COMF   2A,F
03D0:  INCF   27,F
03D1:  BTFSC  03.2
03D2:  INCF   28,F
03D3:  BTFSC  03.2
03D4:  INCF   29,F
03D5:  BTFSC  03.2
03D6:  INCF   2A,F
03D7:  MOVLW  3B
03D8:  MOVWF  33
03D9:  MOVLW  9A
03DA:  MOVWF  32
03DB:  MOVLW  CA
03DC:  MOVWF  31
03DD:  CLRF   30
03DE:  MOVLW  0A
03DF:  MOVWF  2E
03E0:  MOVF   2B,W
03E1:  BTFSC  03.2
03E2:  INCF   2C,F
03E3:  BSF    03.1
03E4:  MOVLW  27
03E5:  MOVWF  04
03E6:  BCF    03.7
03E7:  MOVF   2A,W
03E8:  MOVWF  37
03E9:  MOVF   29,W
03EA:  MOVWF  36
03EB:  MOVF   28,W
03EC:  MOVWF  35
03ED:  MOVF   27,W
03EE:  MOVWF  34
03EF:  MOVF   33,W
03F0:  MOVWF  3B
03F1:  MOVF   32,W
03F2:  MOVWF  3A
03F3:  MOVF   31,W
03F4:  MOVWF  39
03F5:  MOVF   30,W
03F6:  MOVWF  38
03F7:  CALL   32C
03F8:  MOVF   78,W
03F9:  MOVF   77,F
03FA:  BTFSS  03.2
03FB:  GOTO   40F
03FC:  INCF   2B,W
03FD:  SUBWF  2E,W
03FE:  BTFSC  03.2
03FF:  GOTO   40F
0400:  MOVF   2C,W
0401:  BTFSC  03.2
0402:  GOTO   411
0403:  ANDLW  0F
0404:  SUBWF  2E,W
0405:  BTFSC  03.2
0406:  GOTO   409
0407:  BTFSC  03.0
0408:  GOTO   441
0409:  BTFSC  2C.7
040A:  GOTO   441
040B:  BTFSC  2C.6
040C:  GOTO   411
040D:  MOVLW  20
040E:  GOTO   43D
040F:  MOVLW  20
0410:  ANDWF  2C,F
0411:  BTFSS  2C.5
0412:  GOTO   41F
0413:  BCF    2C.5
0414:  MOVF   2B,W
0415:  BTFSS  03.2
0416:  DECF   2C,F
0417:  MOVF   77,W
0418:  MOVWF  2C
0419:  MOVLW  2D
041A:  MOVWF  34
041B:  CALL   228
041C:  MOVF   2C,W
041D:  MOVWF  77
041E:  CLRF   2C
041F:  MOVF   2B,W
0420:  SUBWF  2E,W
0421:  BTFSS  03.2
0422:  GOTO   42D
0423:  MOVF   77,W
0424:  MOVWF  2C
0425:  MOVLW  2E
0426:  MOVWF  34
0427:  CALL   228
0428:  MOVF   2C,W
0429:  MOVWF  77
042A:  MOVLW  20
042B:  ANDWF  2C,F
042C:  MOVLW  00
042D:  MOVLW  30
042E:  BTFSS  2C.5
042F:  GOTO   43D
0430:  BCF    2C.5
0431:  MOVF   2B,W
0432:  BTFSS  03.2
0433:  DECF   2C,F
0434:  MOVF   77,W
0435:  MOVWF  2C
0436:  MOVLW  2D
0437:  MOVWF  34
0438:  CALL   228
0439:  MOVF   2C,W
043A:  MOVWF  77
043B:  CLRF   2C
043C:  MOVLW  30
043D:  ADDWF  77,F
043E:  MOVF   77,W
043F:  MOVWF  34
0440:  CALL   228
0441:  BCF    03.1
0442:  MOVF   33,W
0443:  MOVWF  37
0444:  MOVF   32,W
0445:  MOVWF  36
0446:  MOVF   31,W
0447:  MOVWF  35
0448:  MOVF   30,W
0449:  MOVWF  34
044A:  CLRF   3B
044B:  CLRF   3A
044C:  CLRF   39
044D:  MOVLW  0A
044E:  MOVWF  38
044F:  CALL   32C
0450:  MOVF   7A,W
0451:  MOVWF  33
0452:  MOVF   79,W
0453:  MOVWF  32
0454:  MOVF   78,W
0455:  MOVWF  31
0456:  MOVF   77,W
0457:  MOVWF  30
0458:  DECFSZ 2E,F
0459:  GOTO   3E3
045A:  BCF    0A.3
045B:  GOTO   4E5 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #FUSES XT, NOWDT 
.................... #FUSES 
.................... #use delay(clock=4000000) 
*
0014:  MOVLW  35
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   028
001A:  MOVLW  01
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  4A
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  GOTO   026
0026:  DECFSZ 00,F
0027:  GOTO   01A
0028:  RETURN
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0041:  MOVLW  0F
0042:  BSF    03.5
0043:  ANDWF  06,W
0044:  IORLW  F0
0045:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0046:  BCF    03.5
0047:  BSF    06.2
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    06.0
....................    delay_cycles(1); 
004A:  NOP
....................    high = lcd_read_nibble(); 
004B:  CALL   035
004C:  MOVF   78,W
004D:  MOVWF  3C
....................        
....................    lcd_output_enable(0); 
004E:  BCF    06.0
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    06.0
....................    delay_us(1); 
0051:  NOP
....................    low = lcd_read_nibble(); 
0052:  CALL   035
0053:  MOVF   78,W
0054:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
0055:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0056:  MOVLW  0F
0057:  BSF    03.5
0058:  ANDWF  06,W
0059:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005A:  BCF    03.5
005B:  SWAPF  3C,W
005C:  MOVWF  77
005D:  MOVLW  F0
005E:  ANDWF  77,F
005F:  MOVF   77,W
0060:  IORWF  3B,W
0061:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0035:  MOVF   06,W
0036:  MOVWF  77
0037:  SWAPF  06,W
0038:  ANDLW  0F
0039:  MOVWF  78
....................   #endif 
003A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0029:  SWAPF  3C,W
002A:  ANDLW  F0
002B:  MOVWF  77
002C:  MOVLW  0F
002D:  ANDWF  06,W
002E:  IORWF  77,W
002F:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0030:  NOP
....................    lcd_output_enable(1); 
0031:  BSF    06.0
....................    delay_us(2); 
0032:  GOTO   033
....................    lcd_output_enable(0); 
0033:  BCF    06.0
0034:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003B:  BSF    03.5
003C:  BCF    06.0
....................    lcd_rs_tris(); 
003D:  BCF    06.1
....................    lcd_rw_tris(); 
003E:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003F:  BCF    03.5
0040:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0062:  MOVF   78,W
0063:  MOVWF  3B
0064:  BTFSC  3B.7
0065:  GOTO   041
....................    lcd_output_rs(address); 
0066:  BTFSS  39.0
0067:  BCF    06.1
0068:  BTFSC  39.0
0069:  BSF    06.1
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_rw(0); 
006B:  BCF    06.2
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_enable(0); 
006D:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
006E:  SWAPF  3A,W
006F:  MOVWF  3B
0070:  MOVLW  0F
0071:  ANDWF  3B,F
0072:  MOVF   3B,W
0073:  MOVWF  3C
0074:  CALL   029
....................    lcd_send_nibble(n & 0xf); 
0075:  MOVF   3A,W
0076:  ANDLW  0F
0077:  MOVWF  3B
0078:  MOVWF  3C
0079:  CALL   029
007A:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007B:  MOVLW  28
007C:  MOVWF  28
007D:  MOVLW  0C
007E:  MOVWF  29
007F:  MOVLW  01
0080:  MOVWF  2A
0081:  MOVLW  06
0082:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0083:  BCF    06.0
....................    lcd_output_rs(0); 
0084:  BCF    06.1
....................    lcd_output_rw(0); 
0085:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0086:  MOVLW  0F
0087:  BSF    03.5
0088:  ANDWF  06,W
0089:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
008A:  BCF    06.0
....................    lcd_rs_tris(); 
008B:  BCF    06.1
....................    lcd_rw_tris(); 
008C:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
008D:  MOVLW  0F
008E:  BCF    03.5
008F:  MOVWF  35
0090:  CALL   014
....................    for(i=1;i<=3;++i) 
0091:  MOVLW  01
0092:  MOVWF  27
0093:  MOVF   27,W
0094:  SUBLW  03
0095:  BTFSS  03.0
0096:  GOTO   09F
....................    { 
....................        lcd_send_nibble(3); 
0097:  MOVLW  03
0098:  MOVWF  3C
0099:  CALL   029
....................        delay_ms(5); 
009A:  MOVLW  05
009B:  MOVWF  35
009C:  CALL   014
009D:  INCF   27,F
009E:  GOTO   093
....................    } 
....................     
....................    lcd_send_nibble(2); 
009F:  MOVLW  02
00A0:  MOVWF  3C
00A1:  CALL   029
....................    delay_ms(5); 
00A2:  MOVLW  05
00A3:  MOVWF  35
00A4:  CALL   014
....................    for(i=0;i<=3;++i) 
00A5:  CLRF   27
00A6:  MOVF   27,W
00A7:  SUBLW  03
00A8:  BTFSS  03.0
00A9:  GOTO   0B6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AA:  MOVLW  28
00AB:  ADDWF  27,W
00AC:  MOVWF  04
00AD:  BCF    03.7
00AE:  MOVF   00,W
00AF:  MOVWF  2C
00B0:  CLRF   39
00B1:  MOVF   2C,W
00B2:  MOVWF  3A
00B3:  CALL   03B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B4:  INCF   27,F
00B5:  GOTO   0A6
00B6:  BCF    0A.3
00B7:  GOTO   477 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0216:  DECFSZ 36,W
0217:  GOTO   219
0218:  GOTO   21C
....................       address=LCD_LINE_TWO; 
0219:  MOVLW  40
021A:  MOVWF  37
021B:  GOTO   21D
....................    else 
....................       address=0; 
021C:  CLRF   37
....................       
....................    address+=x-1; 
021D:  MOVLW  01
021E:  SUBWF  35,W
021F:  ADDWF  37,F
....................    lcd_send_byte(0,0x80|address); 
0220:  MOVF   37,W
0221:  IORLW  80
0222:  MOVWF  38
0223:  CLRF   39
0224:  MOVF   38,W
0225:  MOVWF  3A
0226:  CALL   03B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0227:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0228:  MOVF   34,W
0229:  XORLW  07
022A:  BTFSC  03.2
022B:  GOTO   236
022C:  XORLW  0B
022D:  BTFSC  03.2
022E:  GOTO   23B
022F:  XORLW  06
0230:  BTFSC  03.2
0231:  GOTO   243
0232:  XORLW  02
0233:  BTFSC  03.2
0234:  GOTO   249
0235:  GOTO   24E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0236:  MOVLW  01
0237:  MOVWF  35
0238:  MOVWF  36
0239:  CALL   216
023A:  GOTO   253
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
023B:  CLRF   39
023C:  MOVLW  01
023D:  MOVWF  3A
023E:  CALL   03B
....................                      delay_ms(2); 
023F:  MOVLW  02
0240:  MOVWF  35
0241:  CALL   014
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0242:  GOTO   253
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0243:  MOVLW  01
0244:  MOVWF  35
0245:  MOVLW  02
0246:  MOVWF  36
0247:  CALL   216
0248:  GOTO   253
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0249:  CLRF   39
024A:  MOVLW  10
024B:  MOVWF  3A
024C:  CALL   03B
024D:  GOTO   253
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
024E:  MOVLW  01
024F:  MOVWF  39
0250:  MOVF   34,W
0251:  MOVWF  3A
0252:  CALL   03B
....................      #endif 
....................    } 
0253:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() {    
*
045C:  MOVF   03,W
045D:  ANDLW  1F
045E:  MOVWF  03
045F:  BSF    03.5
0460:  BCF    1F.4
0461:  BCF    1F.5
0462:  MOVF   1B,W
0463:  ANDLW  80
0464:  MOVWF  1B
0465:  MOVLW  07
0466:  MOVWF  1C
0467:  BCF    03.7
....................    int16 q; 
....................    float p; 
....................  
....................    setup_port_a(ALL_ANALOG); 
0468:  BCF    1F.4
0469:  BCF    1F.5
046A:  MOVF   1B,W
046B:  ANDLW  80
046C:  IORLW  7F
046D:  MOVWF  1B
....................    setup_adc(ADC_CLOCK_INTERNAL); 
046E:  BCF    1F.6
046F:  BCF    03.5
0470:  BSF    1F.6
0471:  BSF    1F.7
0472:  BSF    03.5
0473:  BSF    1F.7
0474:  BCF    03.5
0475:  BSF    1F.0
....................    lcd_init(); 
0476:  GOTO   07B
....................     
....................    for(;;){ 
....................       set_adc_channel(0); 
0477:  MOVLW  00
0478:  MOVWF  78
0479:  MOVF   1F,W
047A:  ANDLW  C7
047B:  IORWF  78,W
047C:  MOVWF  1F
....................       delay_us(20); 
047D:  MOVLW  06
047E:  MOVWF  77
047F:  DECFSZ 77,F
0480:  GOTO   47F
0481:  NOP
....................       q=read_adc(); 
0482:  BSF    1F.2
0483:  BTFSC  1F.2
0484:  GOTO   483
0485:  BSF    03.5
0486:  MOVF   1E,W
0487:  BCF    03.5
0488:  MOVWF  21
0489:  MOVF   1E,W
048A:  MOVWF  22
....................       p=5.0*q/1024.0; 
048B:  MOVF   22,W
048C:  MOVWF  28
048D:  MOVF   21,W
048E:  MOVWF  27
048F:  GOTO   0B8
0490:  CLRF   37
0491:  CLRF   36
0492:  MOVLW  20
0493:  MOVWF  35
0494:  MOVLW  81
0495:  MOVWF  34
0496:  MOVF   7A,W
0497:  MOVWF  3B
0498:  MOVF   79,W
0499:  MOVWF  3A
049A:  MOVF   78,W
049B:  MOVWF  39
049C:  MOVF   77,W
049D:  MOVWF  38
049E:  CALL   0D6
049F:  MOVF   7A,W
04A0:  MOVWF  2A
04A1:  MOVF   79,W
04A2:  MOVWF  29
04A3:  MOVF   78,W
04A4:  MOVWF  28
04A5:  MOVF   77,W
04A6:  MOVWF  27
04A7:  MOVF   7A,W
04A8:  MOVWF  2E
04A9:  MOVF   79,W
04AA:  MOVWF  2D
04AB:  MOVF   78,W
04AC:  MOVWF  2C
04AD:  MOVF   77,W
04AE:  MOVWF  2B
04AF:  CLRF   32
04B0:  CLRF   31
04B1:  CLRF   30
04B2:  MOVLW  89
04B3:  MOVWF  2F
04B4:  GOTO   14B
04B5:  MOVF   7A,W
04B6:  MOVWF  26
04B7:  MOVF   79,W
04B8:  MOVWF  25
04B9:  MOVF   78,W
04BA:  MOVWF  24
04BB:  MOVF   77,W
04BC:  MOVWF  23
....................       printf (lcd_putc, "\fADC = %4ld", q); 
04BD:  MOVLW  04
04BE:  BSF    03.6
04BF:  MOVWF  0D
04C0:  MOVLW  00
04C1:  MOVWF  0F
04C2:  BCF    03.0
04C3:  MOVLW  07
04C4:  BCF    03.6
04C5:  MOVWF  27
04C6:  CALL   254
04C7:  MOVLW  02
04C8:  MOVWF  04
04C9:  MOVF   22,W
04CA:  MOVWF  28
04CB:  MOVF   21,W
04CC:  MOVWF  27
04CD:  GOTO   2AB
....................       printf (lcd_putc, "\nVoltage = %01.2fV", p); 
04CE:  MOVLW  0A
04CF:  BSF    03.6
04D0:  MOVWF  0D
04D1:  MOVLW  00
04D2:  MOVWF  0F
04D3:  BCF    03.0
04D4:  MOVLW  0B
04D5:  BCF    03.6
04D6:  MOVWF  27
04D7:  CALL   254
04D8:  MOVLW  C9
04D9:  MOVWF  04
04DA:  MOVF   26,W
04DB:  MOVWF  2A
04DC:  MOVF   25,W
04DD:  MOVWF  29
04DE:  MOVF   24,W
04DF:  MOVWF  28
04E0:  MOVF   23,W
04E1:  MOVWF  27
04E2:  MOVLW  02
04E3:  MOVWF  2B
04E4:  GOTO   37B
04E5:  MOVLW  56
04E6:  MOVWF  34
04E7:  CALL   228
....................       delay_ms(100); 
04E8:  MOVLW  64
04E9:  MOVWF  35
04EA:  CALL   014
04EB:  GOTO   477
....................    } 
.................... } 
04EC:  SLEEP

Configuration Fuses:
   Word  1: 3F61   NOWDT PUT XT MCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
