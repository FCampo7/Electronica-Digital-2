CCS PCM C Compiler, Version 5.076, 56587               22-sep.-20 14:10

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Ejercicios\Guía2\Problema 3 Bis\main.lst

               ROM used:   119 words (3%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           10 (3%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   04D
0003:  NOP
.................... #include <main.h> 
.................... #include <16F88.h> 
.................... //////////// Standard Header file for the PIC16F88 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F88 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0004:  MOVLW  25
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... #FUSES NOWDT 
....................  
.................... #BYTE PORTA=0x05 
.................... #BYTE TRISA=0x85 
.................... #BYTE PORTB=0x06 
.................... #BYTE TRISB=0x86 
....................  
....................  
.................... void intermitencia(int pa, int16 ms){ 
....................    if(bit_test(PORTA, pa)==1) 
0018:  MOVF   05,W
0019:  MOVWF  77
001A:  MOVF   21,W
001B:  MOVWF  78
001C:  BTFSC  03.2
001D:  GOTO   022
001E:  BCF    03.0
001F:  RRF    77,F
0020:  DECFSZ 78,F
0021:  GOTO   01E
0022:  BTFSS  77.0
0023:  GOTO   032
....................       bit_clear(PORTA, pa); 
0024:  MOVLW  01
0025:  MOVWF  77
0026:  MOVF   21,W
0027:  MOVWF  78
0028:  BTFSC  03.2
0029:  GOTO   02E
002A:  BCF    03.0
002B:  RLF    77,F
002C:  DECFSZ 78,F
002D:  GOTO   02A
002E:  MOVF   77,W
002F:  XORLW  FF
0030:  ANDWF  05,F
0031:  GOTO   03E
....................    else 
....................       bit_set(PORTA, pa); 
0032:  MOVLW  01
0033:  MOVWF  77
0034:  MOVF   21,W
0035:  MOVWF  78
0036:  BTFSC  03.2
0037:  GOTO   03C
0038:  BCF    03.0
0039:  RLF    77,F
003A:  DECFSZ 78,F
003B:  GOTO   038
003C:  MOVF   77,W
003D:  IORWF  05,F
....................    delay_ms(ms); 
003E:  MOVF   23,W
003F:  MOVWF  24
0040:  INCF   24,F
0041:  DECF   24,F
0042:  BTFSC  03.2
0043:  GOTO   048
0044:  MOVLW  FF
0045:  MOVWF  25
0046:  CALL   004
0047:  GOTO   041
0048:  MOVF   22,W
0049:  MOVWF  25
004A:  CALL   004
004B:  BCF    0A.3
004C:  GOTO   073 (RETURN)
.................... } 
....................  
.................... void main() 
004D:  MOVF   03,W
004E:  ANDLW  1F
004F:  MOVWF  03
0050:  BSF    03.5
0051:  BCF    1F.4
0052:  BCF    1F.5
0053:  MOVF   1B,W
0054:  ANDLW  80
0055:  MOVWF  1B
0056:  MOVLW  07
0057:  MOVWF  1C
0058:  BCF    03.7
.................... { 
....................  
....................    TRISA=0xEF; 
0059:  MOVLW  EF
005A:  MOVWF  05
....................    PORTA=0x00; 
005B:  BCF    03.5
005C:  CLRF   05
....................    TRISB=0x18; 
005D:  MOVLW  18
005E:  BSF    03.5
005F:  MOVWF  06
....................    PORTB=0x00; 
0060:  BCF    03.5
0061:  CLRF   06
....................  
....................    while(1) 
....................    { 
....................  
....................       if(bit_test(PORTB, 3)==bit_test(PORTB, 4)){ 
0062:  MOVLW  00
0063:  BTFSC  06.3
0064:  MOVLW  01
0065:  MOVWF  21
0066:  MOVLW  00
0067:  BTFSC  06.4
0068:  MOVLW  01
0069:  SUBWF  21,W
006A:  BTFSS  03.2
006B:  GOTO   074
....................          intermitencia(4, 500); 
006C:  MOVLW  04
006D:  MOVWF  21
006E:  MOVLW  01
006F:  MOVWF  23
0070:  MOVLW  F4
0071:  MOVWF  22
0072:  GOTO   018
....................       } 
0073:  GOTO   075
....................       else 
....................          bit_clear(PORTA, 4); 
0074:  BCF    05.4
0075:  GOTO   062
....................    } 
....................  
.................... } 
0076:  SLEEP

Configuration Fuses:
   Word  1: 3F62   NOWDT PUT HS MCLR BROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFF   FCMEN IESO
