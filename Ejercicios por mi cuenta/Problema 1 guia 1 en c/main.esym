F N "main" 0 6 ""
D G "__PCM__" 0 25 ""5.076""
D G "__DEVICE__" 0 25 "88"
D G "__DATE__" 0 25 ""19-oct.-20""
D G "__TIME__" 0 25 ""11:01:05""
D G "_UNICODE" 0 25 ""?""
D G "__EVAL" 0 25 ""?"" "Standard Header file for the PIC16F88 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 38 ""
v L "value" 2 38 "int8" `55 
f B "set_tris_a" 2 38 "void(int8 value)" `54 
f N "set_tris_b" 2 39 ""
v L "value" 2 39 "int8" `57 
f B "set_tris_b" 2 39 "void(int8 value)" `56 
f N "get_tris_a" 2 40 ""
f B "get_tris_a" 2 40 "int8()" `58 
f N "get_tris_b" 2 41 ""
f B "get_tris_b" 2 41 "int8()" `59 
f N "output_a" 2 42 ""
v L "value" 2 42 "int8" `61 
f B "output_a" 2 42 "void(int8 value)" `60 
f N "output_b" 2 43 ""
v L "value" 2 43 "int8" `63 
f B "output_b" 2 43 "void(int8 value)" `62 
f N "input_a" 2 44 ""
f B "input_a" 2 44 "int8()" `64 
f N "input_b" 2 45 ""
f B "input_b" 2 45 "int8()" `65 
f N "input_change_a" 2 46 ""
f B "input_change_a" 2 46 "int8()" `66 
f N "input_change_b" 2 47 ""
f B "input_change_b" 2 47 "int8()" `67 
f N "port_b_pullups" 2 48 ""
v L "value" 2 48 "int8" `69 
f B "port_b_pullups" 2 48 "void(int8 value)" `68 
f N "input" 2 49 ""
v L "pin" 2 49 "int16" `71 
f B "input" 2 49 "int8(int16 pin)" `70 
f N "input_state" 2 50 ""
v L "pin" 2 50 "int16" `73 
f B "input_state" 2 50 "int8(int16 pin)" `72 
f N "output_low" 2 51 ""
v L "pin" 2 51 "int16" `75 
f B "output_low" 2 51 "void(int16 pin)" `74 
f N "output_high" 2 52 ""
v L "pin" 2 52 "int16" `77 
f B "output_high" 2 52 "void(int16 pin)" `76 
f N "output_toggle" 2 53 ""
v L "pin" 2 53 "int16" `79 
f B "output_toggle" 2 53 "void(int16 pin)" `78 
f N "output_bit" 2 54 ""
v L "pin" 2 54 "int16" `81 
v L "level" 2 54 "int8" `82 
f B "output_bit" 2 54 "void(int16 pin,int8 level)" `80 
f N "output_float" 2 55 ""
v L "pin" 2 55 "int16" `84 
f B "output_float" 2 55 "void(int16 pin)" `83 
f N "output_drive" 2 56 ""
v L "pin" 2 56 "int16" `86 
f B "output_drive" 2 56 "void(int16 pin)" `85  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 60 "40"
d G "PIN_A1" 2 61 "41"
d G "PIN_A2" 2 62 "42"
d G "PIN_A3" 2 63 "43"
d G "PIN_A4" 2 64 "44"
d G "PIN_A5" 2 65 "45"
d G "PIN_A6" 2 66 "46"
d G "PIN_A7" 2 67 "47"
d G "PIN_B0" 2 69 "48"
d G "PIN_B1" 2 70 "49"
d G "PIN_B2" 2 71 "50"
d G "PIN_B3" 2 72 "51"
d G "PIN_B4" 2 73 "52"
d G "PIN_B5" 2 74 "53"
d G "PIN_B6" 2 75 "54"
d G "PIN_B7" 2 76 "55"
d G "FALSE" 2 79 "0"
d G "TRUE" 2 80 "1"
d G "BYTE" 2 82 "int8"
d G "BOOLEAN" 2 83 "int1"
d G "getc" 2 85 "getch"
d G "fgetc" 2 86 "getch"
d G "getchar" 2 87 "getch"
d G "putc" 2 88 "putchar"
d G "fputc" 2 89 "putchar"
d G "fgets" 2 90 "gets"
d G "fputs" 2 91 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 96 ""
f B "restart_cause" 2 96 "int8()" `87 
f N "reset_cpu" 2 97 ""
f B "reset_cpu" 2 97 "void()" `88 
f N "sleep" 2 98 ""
f B "sleep" 2 98 "void()" `89  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 100 "3"
d G "WDT_TIMEOUT" 2 101 "11"
d G "MCLR_FROM_SLEEP" 2 102 "19"
d G "MCLR_FROM_RUN" 2 103 "27"
d G "NORMAL_POWER_UP" 2 104 "25"
d G "BROWNOUT_RESTART" 2 105 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 112 ""
v L "mode" 2 112 "int8" `91 
f B "setup_timer_0" 2 112 "void(int8 mode)" `90 
f N "set_timer0" 2 113 ""
v L "value" 2 113 "int8" `93 
f B "set_timer0" 2 113 "void(int8 value)" `92 
f N "get_timer0" 2 114 ""
f B "get_timer0" 2 114 "int8()" `94 
f N "setup_counters" 2 115 ""
v L "mode" 2 115 "int8" `96 
v L "prescaler" 2 115 "int8" `97 
f B "setup_counters" 2 115 "void(int8 mode,int8 prescaler)" `95 
f N "set_rtcc" 2 116 ""
v L "value" 2 116 "int8" `99 
f B "set_rtcc" 2 116 "void(int8 value)" `98 
f N "get_rtcc" 2 117 ""
f B "get_rtcc" 2 117 "int8()" `100  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 119 "0"
d G "T0_EXT_L_TO_H" 2 120 "32"
d G "T0_EXT_H_TO_L" 2 121 "48"
d G "T0_DIV_1" 2 123 "8"
d G "T0_DIV_2" 2 124 "0"
d G "T0_DIV_4" 2 125 "1"
d G "T0_DIV_8" 2 126 "2"
d G "T0_DIV_16" 2 127 "3"
d G "T0_DIV_32" 2 128 "4"
d G "T0_DIV_64" 2 129 "5"
d G "T0_DIV_128" 2 130 "6"
d G "T0_DIV_256" 2 131 "7"
d G "T0_8_BIT" 2 134 "0"
d G "RTCC_INTERNAL" 2 138 "0"
d G "RTCC_EXT_L_TO_H" 2 139 "32"
d G "RTCC_EXT_H_TO_L" 2 140 "48"
d G "RTCC_DIV_1" 2 141 "8"
d G "RTCC_DIV_2" 2 142 "0"
d G "RTCC_DIV_4" 2 143 "1"
d G "RTCC_DIV_8" 2 144 "2"
d G "RTCC_DIV_16" 2 145 "3"
d G "RTCC_DIV_32" 2 146 "4"
d G "RTCC_DIV_64" 2 147 "5"
d G "RTCC_DIV_128" 2 148 "6"
d G "RTCC_DIV_256" 2 149 "7"
d G "RTCC_8_BIT" 2 150 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 161 ""
v L "mode" 2 161 "int16" `102 
f B "setup_wdt" 2 161 "void(int16 mode)" `101 
f N "restart_wdt" 2 162 ""
f B "restart_wdt" 2 162 "void()" `103  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 165 "8"
d G "WDT_36MS" 2 166 "9"
d G "WDT_72MS" 2 167 "10"
d G "WDT_144MS" 2 168 "11"
d G "WDT_288MS" 2 169 "12"
d G "WDT_576MS" 2 170 "13"
d G "WDT_1152MS" 2 171 "14"
d G "WDT_2304MS" 2 172 "15"
d G "WDT_ON" 2 177 "0x4000"
d G "WDT_OFF" 2 178 "0"
d G "WDT_DIV_16" 2 179 "0x100"
d G "WDT_DIV_8" 2 180 "0x300"
d G "WDT_DIV_4" 2 181 "0x500"
d G "WDT_DIV_2" 2 182 "0x700"
d G "WDT_TIMES_1" 2 183 "0x900" "Default"
d G "WDT_TIMES_2" 2 184 "0xB00"
d G "WDT_TIMES_4" 2 185 "0xD00"
d G "WDT_TIMES_8" 2 186 "0xF00"
d G "WDT_TIMES_16" 2 187 "0x1100"
d G "WDT_TIMES_32" 2 188 "0x1300"
d G "WDT_TIMES_64" 2 189 "0x1500"
d G "WDT_TIMES_128" 2 190 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 195 ""
v L "mode" 2 195 "int16" `105 
f B "setup_timer_1" 2 195 "void(int16 mode)" `104 
f N "get_timer1" 2 196 ""
f B "get_timer1" 2 196 "int16()" `106 
f N "set_timer1" 2 197 ""
v L "value" 2 197 "int16" `108 
f B "set_timer1" 2 197 "void(int16 value)" `107  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 200 "0"
d G "T1_INTERNAL" 2 201 "0x85"
d G "T1_EXTERNAL" 2 202 "0x87"
d G "T1_EXTERNAL_SYNC" 2 203 "0x83"
d G "T1_CLK_OUT" 2 205 "8"
d G "T1_DIV_BY_1" 2 207 "0"
d G "T1_DIV_BY_2" 2 208 "0x10"
d G "T1_DIV_BY_4" 2 209 "0x20"
d G "T1_DIV_BY_8" 2 210 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 215 ""
v L "mode" 2 215 "int8" `110 
v L "period" 2 215 "int8" `111 
v L "postscale" 2 215 "int8" `112 
f B "setup_timer_2" 2 215 "void(int8 mode,int8 period,int8 postscale)" `109 
f N "get_timer2" 2 216 ""
f B "get_timer2" 2 216 "int8()" `113 
f N "set_timer2" 2 217 ""
v L "value" 2 217 "int8" `115 
f B "set_timer2" 2 217 "void(int8 value)" `114  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 219 "0"
d G "T2_DIV_BY_1" 2 220 "4"
d G "T2_DIV_BY_4" 2 221 "5"
d G "T2_DIV_BY_16" 2 222 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 228 ""
v L "mode" 2 228 "int32" `117 
f B "setup_ccp1" 2 228 "void(int32 mode)" `116 
f N "setup_ccp1" 2 229 ""
v L "mode" 2 229 "int32" `119 
v L "pwm" 2 229 "int8" `120 
f B "setup_ccp1" 2 229 "void(int32 mode,int8 pwm)" `118 
f N "set_pwm1_duty" 2 230 ""
v L "value" 2 230 "int16" `122 
f B "set_pwm1_duty" 2 230 "void(int16 value)" `121  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 232 "0"
d G "CCP_CAPTURE_FE" 2 233 "0x04"
d G "CCP_CAPTURE_RE" 2 234 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 235 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 236 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 237 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 238 "0x09"
d G "CCP_COMPARE_INT" 2 239 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 240 "0x0B"
d G "CCP_PWM" 2 241 "0x0C"
d G "CCP_PWM_PLUS_1" 2 242 "0x1c"
d G "CCP_PWM_PLUS_2" 2 243 "0x2c"
d G "CCP_PWM_PLUS_3" 2 244 "0x3c"
c L "set_pwm1_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 252 ""
v L "mode" 2 252 "int32" `127 
f B "setup_spi" 2 252 "void(int32 mode)" `126 
f N "spi_write" 2 253 ""
v L "value" 2 253 "int8" `129 
f B "spi_write" 2 253 "void(int8 value)" `128 
f N "spi_read" 2 254 ""
f B "spi_read" 2 254 "int8()" `130 
f N "spi_read" 2 255 ""
v L "value" 2 255 "int8" `132 
f B "spi_read" 2 255 "int8(int8 value)" `131 
f N "spi_data_is_in" 2 256 ""
f B "spi_data_is_in" 2 256 "int8()" `133  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 258 "0x00"
d G "SPI_MASTER" 2 259 "0x20"
d G "SPI_SLAVE" 2 260 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 261 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 262 "0x00"
d G "SPI_CLK_DIV_4" 2 263 "0x00"
d G "SPI_CLK_DIV_16" 2 264 "0x01"
d G "SPI_CLK_DIV_64" 2 265 "0x02"
d G "SPI_CLK_T2" 2 266 "0x03"
d G "SPI_SS_DISABLED" 2 267 "0x01"
d G "SPI_XMIT_L_TO_H" 2 269 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 270 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 272 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 273 "0x8000"
d G "SPI_L_TO_H" 2 276 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 277 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 281 ""
v L "baud" 2 281 "int32" `135 
f B "setup_uart" 2 281 "void(int32 baud)" `134 
f N "setup_uart" 2 282 ""
v L "baud" 2 282 "int32" `137 
v L "stream" 2 282 "int8" `138 
f B "setup_uart" 2 282 "void(int32 baud,int8 stream)" `136 
f N "setup_uart" 2 283 ""
v L "baud" 2 283 "int32" `140 
v L "stream" 2 283 "int8" `141 
v L "clock" 2 283 "int32" `142 
f B "setup_uart" 2 283 "void(int32 baud,int8 stream,int32 clock)" `139 
f N "set_uart_speed" 2 284 ""
v L "baud" 2 284 "int32" `144 
f B "set_uart_speed" 2 284 "void(int32 baud)" `143 
f N "set_uart_speed" 2 285 ""
v L "baud" 2 285 "int32" `146 
v L "stream" 2 285 "int8" `147 
f B "set_uart_speed" 2 285 "void(int32 baud,int8 stream)" `145 
f N "set_uart_speed" 2 286 ""
v L "baud" 2 286 "int32" `149 
v L "stream" 2 286 "int8" `150 
v L "clock" 2 286 "int32" `151 
f B "set_uart_speed" 2 286 "void(int32 baud,int8 stream,int32 clock)" `148  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 290 "2"
d G "UART_DATA" 2 291 "4"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 295 ""
v L "mode" 2 295 "int32" `153 
f B "setup_comparator" 2 295 "void(int32 mode)" `152  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 297 "0x0ff07"
d G "A0_A3_A1_A2" 2 298 "0xfff04"
d G "A0_A2_A1_A2" 2 299 "0x7ff03"
d G "A0_VR_A1_VR" 2 300 "0x3ff02"
d G "A3_VR_A2_VR" 2 301 "0xcff0a"
d G "A3_A2_A1_A2" 2 302 "0xeff0b"
d G "NC_NC_A1_A2" 2 303 "0x6ff05"
d G "A0_A2_A1_A2_OUT_ON_A3_A4" 2 304 "0x7e706"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 311 ""
v L "mode" 2 311 "int8" `157 
f B "setup_vref" 2 311 "void(int8 mode)" `156  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 313 "0xa0"
d G "VREF_HIGH" 2 314 "0x80"
d G "VREF_A2" 2 316 "0x40"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 322 ""
v L "mode" 2 322 "int8" `159 
f B "setup_oscillator" 2 322 "int8(int8 mode)" `158 
f N "setup_oscillator" 2 323 ""
v L "mode" 2 323 "int8" `161 
v L "tune" 2 323 "sint8" `162 
f B "setup_oscillator" 2 323 "int8(int8 mode,sint8 tune)" `160  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 325 "0"
d G "OSC_125KHZ" 2 326 "0x10"
d G "OSC_250KHZ" 2 327 "0x20"
d G "OSC_500KHZ" 2 328 "0x30"
d G "OSC_1MHZ" 2 329 "0x40"
d G "OSC_2MHZ" 2 330 "0x50"
d G "OSC_4MHZ" 2 331 "0x60"
d G "OSC_8MHZ" 2 332 "0x70"
d G "OSC_TIMER1" 2 334 "1"
d G "OSC_INTRC" 2 335 "2"
d G "OSC_NORMAL" 2 336 "0"
d G "OSC_STATE_STABLE" 2 340 "4"
d G "OSC_STATE_EXT_RUNNING" 2 341 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 349 ""
v L "mode" 2 349 "int32" `164 
f B "setup_adc" 2 349 "void(int32 mode)" `163 
f N "read_adc" 2 350 ""
f B "read_adc" 2 350 "int8()" `165 
f N "read_adc" 2 351 ""
v L "mode" 2 351 "int8" `167 
f B "read_adc" 2 351 "int8(int8 mode)" `166 
f N "read_adc" 2 352 ""
f G "read_adc" 2 352 "int16()" `168 
f N "read_adc" 2 353 ""
v L "mode" 2 353 "int8" `169 
f G "read_adc" 2 353 "int16(int8 mode,int16 pins)" `168 
f N "adc_done" 2 354 ""
f B "adc_done" 2 354 "int8(int8 mode,int16 pins)" `168  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 356 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 357 "0x10000"
d G "ADC_CLOCK_DIV_4" 2 358 "0x4000"
d G "ADC_CLOCK_DIV_8" 2 359 "0x0040"
d G "ADC_CLOCK_DIV_16" 2 360 "0x4040"
d G "ADC_CLOCK_DIV_32" 2 361 "0x0080"
d G "ADC_CLOCK_DIV_64" 2 362 "0x4080"
d G "ADC_CLOCK_INTERNAL" 2 363 "0x00c0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 366 ""
v L "pins" 2 366 "int16" `170 
f B "setup_adc_ports" 2 366 "void(int16 pins)" `169 
f N "setup_adc_ports" 2 367 ""
v L "pins" 2 367 "int16" `172 
v L "reference" 2 367 "int16" `173 
f B "setup_adc_ports" 2 367 "void(int16 pins,int16 reference)" `171 
f N "set_analog_pins" 2 368 ""
v L "pins" 2 368 "int16" `175 
f B "set_analog_pins" 2 368 "void(int16 pins)" `174 
f N "set_analog_pins" 2 369 ""
v L "pins" 2 369 "int16" `177 
v L "reference" 2 369 "int16" `178 
f B "set_analog_pins" 2 369 "void(int16 pins,int16 reference)" `176 
f N "set_adc_channel" 2 370 ""
v L "channel" 2 370 "int8" `180 
f B "set_adc_channel" 2 370 "void(int8 channel)" `179  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 374 "1" "| A0"
d G "sAN1" 2 375 "2" "| A1"
d G "sAN2" 2 376 "4" "| A2"
d G "sAN3" 2 377 "8" "| A3"
d G "sAN4" 2 378 "16" "| A4"
d G "sAN5" 2 379 "32" "| B6"
d G "sAN6" 2 380 "64" "| B7"
d G "NO_ANALOGS" 2 381 "0" "None"
d G "ALL_ANALOG" 2 382 "127" "A0 A1 A2 A3 A4 B6 B7"
d G "VSS_VDD" 2 385 "0x0000" "| Range 0-Vdd"
d G "VREF_VDD" 2 386 "0x1000" "| Range VrefL-Vdd"
d G "VSS_VREF" 2 387 "0x2000" "| Range 0-VrefH"
d G "VREF_VREF" 2 388 "0x3000" "| Range VrefL-VrefH"
d G "ADC_START_AND_READ" 2 391 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 392 "1"
d G "ADC_READ_ONLY" 2 393 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 399 ""
v L "x" 2 399 "sint8" `182 
f B "abs" 2 399 "sint8(sint8 x)" `181 
f N "abs" 2 400 ""
v L "x" 2 400 "sint16" `184 
f B "abs" 2 400 "sint16(sint16 x)" `183 
f N "abs" 2 401 ""
v L "x" 2 401 "sint32" `186 
f B "abs" 2 401 "sint32(sint32 x)" `185 
f N "abs" 2 402 ""
v L "x" 2 402 "float" `188 
f B "abs" 2 402 "float(float x)" `187 
f N "_mul" 2 403 ""
v L "??65535" 2 403 "int8" `190 
v L "??65535" 2 403 "int8" `191 
f B "_mul" 2 403 "int16(int8 ,int8 )" `189 
f N "_mul" 2 404 ""
v L "??65535" 2 404 "sint8" `193 
v L "??65535" 2 404 "sint8" `194 
f B "_mul" 2 404 "sint16(sint8 ,sint8 )" `192 
f N "_mul" 2 405 ""
v L "??65535" 2 405 "int16" `196 
v L "??65535" 2 405 "int16" `197 
f B "_mul" 2 405 "int32(int16 ,int16 )" `195 
f N "_mul" 2 406 ""
v L "??65535" 2 406 "sint16" `199 
v L "??65535" 2 406 "sint16" `200 
f B "_mul" 2 406 "sint32(sint16 ,sint16 )" `198  "Memory Manipulation Prototypes:"
f N "read_bank" 2 409 ""
v L "bank" 2 409 "int8" `202 
v L "offset" 2 409 "int8" `203 
f B "read_bank" 2 409 "int8(int8 bank,int8 offset)" `201 
f N "write_bank" 2 410 ""
v L "bank" 2 410 "int8" `205 
v L "offset" 2 410 "int8" `206 
v L "value" 2 410 "int8" `207 
f B "write_bank" 2 410 "void(int8 bank,int8 offset,int8 value)" `204 
f N "strcpy" 2 411 ""
v L "dest" 2 411 "*int8" `209 
v L "src" 2 411 "*int8" `210 
f B "strcpy" 2 411 "void(*int8 dest,*int8 src)" `208 
f N "memset" 2 412 ""
v L "destination" 2 412 "*int8" `212 
v L "value" 2 412 "int8" `213 
v L "num" 2 412 "int16" `214 
f B "memset" 2 412 "void(*int8 destination,int8 value,int16 num)" `211 
f N "memcpy" 2 413 ""
v L "destination" 2 413 "*int8" `216 
v L "source" 2 413 "*int8" `217 
v L "num" 2 413 "int16" `218 
f B "memcpy" 2 413 "void(*int8 destination,*int8 source,int16 num)" `215  "String Prototypes:"
f N "toupper" 2 416 ""
v L "cvalue" 2 416 "int8" `220 
f B "toupper" 2 416 "int8(int8 cvalue)" `219 
f N "tolower" 2 417 ""
v L "cvalue" 2 417 "int8" `222 
f B "tolower" 2 417 "int8(int8 cvalue)" `221 
f N "sprintf" 2 418 ""
v L "string" 2 418 "*int8" `224 
v L "cstring" 2 418 "*int8" `225 
f B "sprintf" 2 418 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `223  "Data Manipulators Prototypes:"
f N "shift_left" 2 421 ""
v L "address" 2 421 "*int8" `228 
v L "bytes" 2 421 "int8" `229 
v L "value" 2 421 "int8" `230 
f B "shift_left" 2 421 "int8(*int8 address,int8 bytes,int8 value)" `227 
f N "shift_right" 2 422 ""
v L "address" 2 422 "*int8" `232 
v L "bytes" 2 422 "int8" `233 
v L "value" 2 422 "int8" `234 
f B "shift_right" 2 422 "int8(*int8 address,int8 bytes,int8 value)" `231 
f N "rotate_left" 2 423 ""
v L "address" 2 423 "*int8" `236 
v L "bytes" 2 423 "int8" `237 
f B "rotate_left" 2 423 "void(*int8 address,int8 bytes)" `235 
f N "rotate_right" 2 424 ""
v L "address" 2 424 "*int8" `239 
v L "bytes" 2 424 "int8" `240 
f B "rotate_right" 2 424 "void(*int8 address,int8 bytes)" `238 
f N "swap" 2 425 ""
v L "value" 2 425 "int8" `242 
f B "swap" 2 425 "void(int8 value)" `241 
f N "make8" 2 426 ""
v L "var" 2 426 "int16" `244 
v L "offset" 2 426 "int8" `245 
f B "make8" 2 426 "int8(int16 var,int8 offset)" `243 
f N "make8" 2 427 ""
v L "var" 2 427 "int32" `247 
v L "offset" 2 427 "int8" `248 
f B "make8" 2 427 "int8(int32 var,int8 offset)" `246 
f N "make16" 2 428 ""
v L "varhigh" 2 428 "int8" `250 
v L "varlow" 2 428 "int8" `251 
f B "make16" 2 428 "int16(int8 varhigh,int8 varlow)" `249 
f N "make32" 2 429 ""
v L "var1" 2 429 "int16" `253 
f B "make32" 2 429 "int32(int16 var1)" `252 
f N "make32" 2 430 ""
v L "var1" 2 430 "int16" `255 
v L "var2" 2 430 "int16" `256 
f B "make32" 2 430 "int32(int16 var1,int16 var2)" `254 
f N "make32" 2 431 ""
v L "var1" 2 431 "int16" `258 
v L "var2" 2 431 "int8" `259 
f B "make32" 2 431 "int32(int16 var1,int8 var2)" `257 
f N "make32" 2 432 ""
v L "var1" 2 432 "int16" `261 
v L "var2" 2 432 "int8" `262 
v L "var3" 2 432 "int8" `263 
f B "make32" 2 432 "int32(int16 var1,int8 var2,int8 var3)" `260 
f N "make32" 2 433 ""
v L "var1" 2 433 "int8" `265 
f B "make32" 2 433 "int32(int8 var1)" `264 
f N "make32" 2 434 ""
v L "var1" 2 434 "int8" `267 
v L "var2" 2 434 "int8" `268 
f B "make32" 2 434 "int32(int8 var1,int8 var2)" `266 
f N "make32" 2 435 ""
v L "var1" 2 435 "int8" `270 
v L "var2" 2 435 "int8" `271 
v L "var3" 2 435 "int8" `272 
f B "make32" 2 435 "int32(int8 var1,int8 var2,int8 var3)" `269 
f N "make32" 2 436 ""
v L "var1" 2 436 "int8" `274 
v L "var2" 2 436 "int8" `275 
v L "var3" 2 436 "int8" `276 
v L "var4" 2 436 "int8" `277 
f B "make32" 2 436 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `273 
f N "make32" 2 437 ""
v L "var1" 2 437 "int8" `279 
v L "var2" 2 437 "int16" `280 
f B "make32" 2 437 "int32(int8 var1,int16 var2)" `278 
f N "make32" 2 438 ""
v L "var1" 2 438 "int8" `282 
v L "var2" 2 438 "int16" `283 
v L "var3" 2 438 "int8" `284 
f B "make32" 2 438 "int32(int8 var1,int16 var2,int8 var3)" `281 
f N "make32" 2 439 ""
v L "var1" 2 439 "int8" `286 
v L "var2" 2 439 "int8" `287 
v L "var3" 2 439 "int16" `288 
f B "make32" 2 439 "int32(int8 var1,int8 var2,int16 var3)" `285 
f N "bit_set" 2 440 ""
v L "var" 2 440 "int8" `290 
v L "bit" 2 440 "int8" `291 
f B "bit_set" 2 440 "void(int8 var,int8 bit)" `289 
f N "bit_set" 2 441 ""
v L "var" 2 441 "int16" `293 
v L "bit" 2 441 "int8" `294 
f B "bit_set" 2 441 "void(int16 var,int8 bit)" `292 
f N "bit_set" 2 442 ""
v L "var" 2 442 "int32" `296 
v L "bit" 2 442 "int8" `297 
f B "bit_set" 2 442 "void(int32 var,int8 bit)" `295 
f N "bit_clear" 2 443 ""
v L "var" 2 443 "int8" `299 
v L "bit" 2 443 "int8" `300 
f B "bit_clear" 2 443 "void(int8 var,int8 bit)" `298 
f N "bit_clear" 2 444 ""
v L "var" 2 444 "int16" `302 
v L "bit" 2 444 "int8" `303 
f B "bit_clear" 2 444 "void(int16 var,int8 bit)" `301 
f N "bit_clear" 2 445 ""
v L "var" 2 445 "int32" `305 
v L "bit" 2 445 "int8" `306 
f B "bit_clear" 2 445 "void(int32 var,int8 bit)" `304 
f N "bit_test" 2 446 ""
v L "var" 2 446 "int8" `308 
v L "bit" 2 446 "int8" `309 
f B "bit_test" 2 446 "int8(int8 var,int8 bit)" `307 
f N "bit_test" 2 447 ""
v L "var" 2 447 "int16" `311 
v L "bit" 2 447 "int8" `312 
f B "bit_test" 2 447 "int8(int16 var,int8 bit)" `310 
f N "bit_test" 2 448 ""
v L "var" 2 448 "int32" `314 
v L "bit" 2 448 "int8" `315 
f B "bit_test" 2 448 "int8(int32 var,int8 bit)" `313  "#use delay() Prototypes:"
f N "delay_cycles" 2 451 ""
v L "count" 2 451 "int8" `317 
f B "delay_cycles" 2 451 "void(int8 count)" `316 
f N "delay_ms" 2 452 ""
v L "time" 2 452 "int16" `319 
f B "delay_ms" 2 452 "void(int16 time)" `318 
f N "delay_us" 2 453 ""
v L "time" 2 453 "int16" `321 
f B "delay_us" 2 453 "void(int16 time)" `320  "#use rs232() Prototypes:"
f N "putchar" 2 456 ""
v L "cdata" 2 456 "int8" `323 
f B "putchar" 2 456 "void(int8 cdata)" `322 
f N "putchar" 2 457 ""
v L "cdata" 2 457 "int8" `325 
v L "stream" 2 457 "int8" `326 
f B "putchar" 2 457 "void(int8 cdata,int8 stream)" `324 
f N "puts" 2 458 ""
v L "string" 2 458 "*int8" `328 
f B "puts" 2 458 "void(*int8 string)" `327 
f N "puts" 2 459 ""
v L "string" 2 459 "*int8" `330 
v L "stream" 2 459 "int8" `331 
f B "puts" 2 459 "void(*int8 string,int8 stream)" `329 
f N "getch" 2 460 ""
f B "getch" 2 460 "int8()" `332 
f N "getch" 2 461 ""
v L "stream" 2 461 "int8" `334 
f B "getch" 2 461 "int8(int8 stream)" `333 
f N "gets" 2 462 ""
v L "string" 2 462 "*int8" `336 
f B "gets" 2 462 "void(*int8 string)" `335 
f N "gets" 2 463 ""
v L "string" 2 463 "*int8" `338 
v L "stream" 2 463 "int8" `339 
f B "gets" 2 463 "void(*int8 string,int8 stream)" `337 
f N "kbhit" 2 464 ""
f B "kbhit" 2 464 "int8()" `340 
f N "kbhit" 2 465 ""
v L "stream" 2 465 "int8" `342 
f B "kbhit" 2 465 "int8(int8 stream)" `341 
f N "printf" 2 466 ""
v L "string" 2 466 "*int8" `344 
f B "printf" 2 466 "void(*int8 string,*int8 _VA_LIST)" `343 
f N "fprintf" 2 467 ""
v L "stream" 2 467 "int8" `347 
v L "string" 2 467 "*int8" `348 
f B "fprintf" 2 467 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `346 
f N "putc_send" 2 468 ""
f B "putc_send" 2 468 "void()" `350 
f N "fputc_send" 2 469 ""
v L "stream" 2 469 "int8" `352 
f B "fputc_send" 2 469 "void(int8 stream)" `351 
f N "rcv_buffer_full" 2 470 ""
f B "rcv_buffer_full" 2 470 "int8()" `353 
f N "rcv_buffer_full" 2 471 ""
v L "stream" 2 471 "int8" `355 
f B "rcv_buffer_full" 2 471 "int8(int8 stream)" `354 
f N "rcv_buffer_bytes" 2 472 ""
f B "rcv_buffer_bytes" 2 472 "int16()" `356 
f N "rcv_buffer_bytes" 2 473 ""
v L "stream" 2 473 "int8" `358 
f B "rcv_buffer_bytes" 2 473 "int16(int8 stream)" `357 
f N "tx_buffer_full" 2 474 ""
f B "tx_buffer_full" 2 474 "int8()" `359 
f N "tx_buffer_full" 2 475 ""
v L "stream" 2 475 "int8" `361 
f B "tx_buffer_full" 2 475 "int8(int8 stream)" `360 
f N "tx_buffer_bytes" 2 476 ""
f B "tx_buffer_bytes" 2 476 "int16()" `362 
f N "tx_buffer_bytes" 2 477 ""
v L "stream" 2 477 "int8" `364 
f B "tx_buffer_bytes" 2 477 "int16(int8 stream)" `363  "#use i2c() Prototypes:"
f N "i2c_read" 2 480 ""
f B "i2c_read" 2 480 "int8()" `365 
f N "i2c_read" 2 481 ""
v L "ack" 2 481 "int8" `367 
f B "i2c_read" 2 481 "int8(int8 ack)" `366 
f N "i2c_read" 2 482 ""
v L "stream" 2 482 "int8" `369 
v L "ack" 2 482 "int8" `370 
f B "i2c_read" 2 482 "int8(int8 stream,int8 ack)" `368 
f N "i2c_write" 2 483 ""
v L "data" 2 483 "int8" `372 
f B "i2c_write" 2 483 "int8(int8 data)" `371 
f N "i2c_write" 2 484 ""
v L "stream" 2 484 "int8" `374 
v L "data" 2 484 "int8" `375 
f B "i2c_write" 2 484 "int8(int8 stream,int8 data)" `373 
f N "i2c_start" 2 485 ""
f B "i2c_start" 2 485 "void()" `376 
f N "i2c_start" 2 486 ""
v L "stream" 2 486 "int8" `378 
f B "i2c_start" 2 486 "void(int8 stream)" `377 
f N "i2c_start" 2 487 ""
v L "stream" 2 487 "int8" `380 
v L "restart" 2 487 "int8" `381 
f B "i2c_start" 2 487 "void(int8 stream,int8 restart)" `379 
f N "i2c_stop" 2 488 ""
f B "i2c_stop" 2 488 "void()" `382 
f N "i2c_stop" 2 489 ""
v L "stream" 2 489 "int8" `384 
f B "i2c_stop" 2 489 "void(int8 stream)" `383 
f N "i2c_isr_state" 2 490 ""
f B "i2c_isr_state" 2 490 "int8()" `385 
f N "i2c_slaveaddr" 2 491 ""
v L "addr" 2 491 "int8" `387 
f B "i2c_slaveaddr" 2 491 "void(int8 addr)" `386 
f N "i2c_slaveaddr" 2 492 ""
v L "stream" 2 492 "int8" `389 
v L "addr" 2 492 "int8" `390 
f B "i2c_slaveaddr" 2 492 "void(int8 stream,int8 addr)" `388 
f N "i2c_poll" 2 493 ""
f B "i2c_poll" 2 493 "int8()" `391 
f N "i2c_poll" 2 494 ""
v L "stream" 2 494 "int8" `393 
f B "i2c_poll" 2 494 "int8(int8 stream)" `392 
f N "i2c_init" 2 495 ""
v L "baud" 2 495 "int32" `395 
f B "i2c_init" 2 495 "void(int32 baud)" `394 
f N "i2c_init" 2 496 ""
v L "stream" 2 496 "int8" `397 
v L "baud" 2 496 "int32" `398 
f B "i2c_init" 2 496 "void(int8 stream,int32 baud)" `396 
f N "i2c_transfer" 2 497 ""
v L "address" 2 497 "int8" `400 
v L "wData" 2 497 "*int8" `401 
v L "wCount" 2 497 "int8" `402 
f B "i2c_transfer" 2 497 "void(int8 address,*int8 wData,int8 wCount)" `399 
f N "i2c_transfer" 2 498 ""
v L "address" 2 498 "int8" `404 
v L "wData" 2 498 "*int8" `405 
v L "wCount" 2 498 "int8" `406 
v L "rData" 2 498 "*int8" `407 
v L "rCount" 2 498 "*int8" `408 
f B "i2c_transfer" 2 498 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `403 
f N "i2c_transfer" 2 499 ""
v L "stream" 2 499 "int8" `410 
v L "address" 2 499 "int8" `411 
v L "wData" 2 499 "*int8" `412 
v L "wCount" 2 499 "int8" `413 
f B "i2c_transfer" 2 499 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `409 
f N "i2c_transfer" 2 500 ""
v L "stream" 2 500 "int8" `415 
v L "address" 2 500 "int8" `416 
v L "wData" 2 500 "*int8" `417 
v L "wCount" 2 500 "int8" `418 
v L "rData" 2 500 "*int8" `419 
v L "rCount" 2 500 "*int8" `420 
f B "i2c_transfer" 2 500 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `414 
f N "i2c_transfer_out" 2 501 ""
v L "address" 2 501 "int8" `422 
v L "wData" 2 501 "*int8" `423 
v L "wCount" 2 501 "int8" `424 
f B "i2c_transfer_out" 2 501 "void(int8 address,*int8 wData,int8 wCount)" `421 
f N "i2c_transfer_out" 2 502 ""
v L "stream" 2 502 "int8" `426 
v L "address" 2 502 "int8" `427 
v L "wData" 2 502 "*int8" `428 
v L "wCount" 2 502 "int8" `429 
f B "i2c_transfer_out" 2 502 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `425 
f N "i2c_transfer_in" 2 503 ""
v L "address" 2 503 "int8" `431 
v L "rData" 2 503 "*int8" `432 
v L "rCount" 2 503 "int8" `433 
f B "i2c_transfer_in" 2 503 "void(int8 address,*int8 rData,int8 rCount)" `430 
f N "i2c_transfer_in" 2 504 ""
v L "stream" 2 504 "int8" `435 
v L "address" 2 504 "int8" `436 
v L "rData" 2 504 "*int8" `437 
v L "rCount" 2 504 "int8" `438 
f B "i2c_transfer_in" 2 504 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `434  "#use spi() Prototypes:"
f N "spi_xfer" 2 507 ""
f B "spi_xfer" 2 507 "int8()" `439 
f N "spi_xfer" 2 508 ""
f G "spi_xfer" 2 508 "int16(int8 data)" `440 
f N "spi_xfer" 2 509 ""
f G "spi_xfer" 2 509 "int32(int8 data)" `440 
f N "spi_xfer" 2 510 ""
v L "data" 2 510 "int8" `441 
f B "spi_xfer" 2 510 "int8(int8 data)" `440 
f N "spi_xfer" 2 511 ""
v L "data" 2 511 "int16" `443 
f B "spi_xfer" 2 511 "int16(int16 data)" `442 
f N "spi_xfer" 2 512 ""
v L "data" 2 512 "int32" `445 
f B "spi_xfer" 2 512 "int32(int32 data)" `444 
f N "spi_xfer" 2 513 ""
v L "stream" 2 513 "int8" `447 
v L "data" 2 513 "int8" `448 
f B "spi_xfer" 2 513 "int8(int8 stream,int8 data)" `446 
f N "spi_xfer" 2 514 ""
v L "stream" 2 514 "int8" `450 
v L "data" 2 514 "int16" `451 
f B "spi_xfer" 2 514 "int16(int8 stream,int16 data)" `449 
f N "spi_xfer" 2 515 ""
v L "stream" 2 515 "int8" `453 
v L "data" 2 515 "int32" `454 
f B "spi_xfer" 2 515 "int32(int8 stream,int32 data)" `452 
f N "spi_xfer" 2 516 ""
v L "stream" 2 516 "int8" `456 
v L "data" 2 516 "int8" `457 
v L "bits" 2 516 "int8" `458 
f B "spi_xfer" 2 516 "int8(int8 stream,int8 data,int8 bits)" `455 
f N "spi_xfer" 2 517 ""
v L "stream" 2 517 "int8" `460 
v L "data" 2 517 "int16" `461 
v L "bits" 2 517 "int8" `462 
f B "spi_xfer" 2 517 "int16(int8 stream,int16 data,int8 bits)" `459 
f N "spi_xfer" 2 518 ""
v L "stream" 2 518 "int8" `464 
v L "data" 2 518 "int32" `465 
v L "bits" 2 518 "int8" `466 
f B "spi_xfer" 2 518 "int32(int8 stream,int32 data,int8 bits)" `463 
f N "spi_init" 2 519 ""
v L "baud" 2 519 "int32" `468 
f B "spi_init" 2 519 "void(int32 baud)" `467 
f N "spi_init" 2 520 ""
v L "stream" 2 520 "int8" `470 
v L "baud" 2 520 "int32" `471 
f B "spi_init" 2 520 "void(int8 stream,int32 baud)" `469 
f N "spi_speed" 2 521 ""
v L "baud" 2 521 "int32" `473 
f B "spi_speed" 2 521 "void(int32 baud)" `472 
f N "spi_speed" 2 522 ""
v L "stream" 2 522 "int8" `475 
v L "baud" 2 522 "int32" `476 
f B "spi_speed" 2 522 "void(int8 stream,int32 baud)" `474 
f N "spi_speed" 2 523 ""
v L "stream" 2 523 "int8" `478 
v L "baud" 2 523 "int32" `479 
v L "clock" 2 523 "int32" `480 
f B "spi_speed" 2 523 "void(int8 stream,int32 baud,int32 clock)" `477 
f N "spi_prewrite" 2 524 ""
v L "data" 2 524 "int8" `482 
f B "spi_prewrite" 2 524 "void(int8 data)" `481 
f N "spi_prewrite" 2 525 ""
v L "data" 2 525 "int16" `484 
f B "spi_prewrite" 2 525 "void(int16 data)" `483 
f N "spi_prewrite" 2 526 ""
v L "data" 2 526 "int32" `486 
f B "spi_prewrite" 2 526 "void(int32 data)" `485 
f N "spi_prewrite" 2 527 ""
v L "??65535" 2 527 "int8" `488 
v L "data" 2 527 "int8" `489 
f B "spi_prewrite" 2 527 "void(int8 ,int8 data)" `487 
f N "spi_prewrite" 2 528 ""
v L "??65535" 2 528 "int8" `491 
v L "data" 2 528 "int16" `492 
f B "spi_prewrite" 2 528 "void(int8 ,int16 data)" `490 
f N "spi_prewrite" 2 529 ""
v L "??65535" 2 529 "int8" `494 
v L "data" 2 529 "int32" `495 
f B "spi_prewrite" 2 529 "void(int8 ,int32 data)" `493 
f N "spi_xfer_in" 2 530 ""
f B "spi_xfer_in" 2 530 "int8()" `496 
f N "spi_xfer_in" 2 531 ""
f G "spi_xfer_in" 2 531 "int16(int8 bits)" `497 
f N "spi_xfer_in" 2 532 ""
f G "spi_xfer_in" 2 532 "int32(int8 bits)" `497 
f N "spi_xfer_in" 2 533 ""
v L "bits" 2 533 "int8" `498 
f B "spi_xfer_in" 2 533 "int8(int8 bits)" `497 
f N "spi_xfer_in" 2 534 ""
v L "bits" 2 534 "int8" `500 
f G "spi_xfer_in" 2 534 "int16(int8 bits,int8 bits)" `499 
f N "spi_xfer_in" 2 535 ""
v L "bits" 2 535 "int8" `500 
f G "spi_xfer_in" 2 535 "int32(int8 bits,int8 bits)" `499 
f N "spi_xfer_in" 2 536 ""
v L "stream" 2 536 "int8" `500 
v L "bits" 2 536 "int8" `501 
f B "spi_xfer_in" 2 536 "int8(int8 stream,int8 bits)" `499 
f N "spi_xfer_in" 2 537 ""
v L "stream" 2 537 "int8" `500 
v L "bits" 2 537 "int8" `504 
f G "spi_xfer_in" 2 537 "int16(int8 stream,int8 bits,int8 task)" `502 
f N "spi_xfer_in" 2 538 ""
v L "stream" 2 538 "int8" `500 
v L "bits" 2 538 "int8" `504 
f G "spi_xfer_in" 2 538 "int32(int8 stream,int8 bits,int8 task)" `502  "#use rtos() Prototypes:"
f N "rtos_run" 2 541 ""
f B "rtos_run" 2 541 "void(int8 stream,int8 bits,int8 task)" `502 
f N "rtos_yield" 2 542 ""
f B "rtos_yield" 2 542 "void(int8 bits,int8 task)" `503 
f N "rtos_enable" 2 543 ""
v L "task" 2 543 "int8" `505 
f B "rtos_enable" 2 543 "void(int8 task)" `504 
f N "rtos_disable" 2 544 ""
v L "task" 2 544 "int8" `507 
f B "rtos_disable" 2 544 "void(int8 task)" `506 
f N "rtos_terminate" 2 545 ""
f B "rtos_terminate" 2 545 "void()" `508 
f N "rtos_await" 2 546 ""
v L "flag" 2 546 "int8" `510 
f B "rtos_await" 2 546 "void(int8 flag)" `509 
f N "rtos_wait" 2 547 ""
v L "sem" 2 547 "int8" `512 
f B "rtos_wait" 2 547 "void(int8 sem)" `511 
f N "rtos_signal" 2 548 ""
v L "sem" 2 548 "int8" `514 
f B "rtos_signal" 2 548 "void(int8 sem)" `513 
f N "rtos_msg_send" 2 549 ""
v L "task" 2 549 "int8" `516 
v L "msg" 2 549 "int8" `517 
f B "rtos_msg_send" 2 549 "void(int8 task,int8 msg)" `515 
f N "rtos_msg_read" 2 550 ""
f B "rtos_msg_read" 2 550 "int8()" `518 
f N "rtos_msg_poll" 2 551 ""
f B "rtos_msg_poll" 2 551 "int8()" `519 
f N "rtos_overrun" 2 552 ""
v L "task" 2 552 "int8" `521 
f B "rtos_overrun" 2 552 "int8(int8 task)" `520 
f N "rtos_stats" 2 553 ""
v L "task" 2 553 "int8" `523 
v L "stat" 2 553 "*int8" `524 
f B "rtos_stats" 2 553 "void(int8 task,*int8 stat)" `522  "#use timer() Prototypes:"
f N "get_ticks" 2 556 ""
f B "get_ticks" 2 556 "int8()" `525 
f N "get_ticks" 2 557 ""
f G "get_ticks" 2 557 "int16(int8 stream)" `526 
f N "get_ticks" 2 558 ""
f G "get_ticks" 2 558 "int32(int8 stream)" `526 
f N "get_ticks" 2 559 ""
v L "stream" 2 559 "int8" `527 
f B "get_ticks" 2 559 "int8(int8 stream)" `526 
f N "get_ticks" 2 560 ""
v L "stream" 2 560 "int8" `529 
f G "get_ticks" 2 560 "int16(int8 stream)" `528 
f N "get_ticks" 2 561 ""
v L "stream" 2 561 "int8" `529 
f G "get_ticks" 2 561 "int32(int8 stream)" `528 
f N "set_ticks" 2 562 ""
v L "value" 2 562 "int8" `529 
f B "set_ticks" 2 562 "void(int8 value)" `528 
f N "set_ticks" 2 563 ""
v L "value" 2 563 "int16" `531 
f B "set_ticks" 2 563 "void(int16 value)" `530 
f N "set_ticks" 2 564 ""
v L "value" 2 564 "int32" `533 
f B "set_ticks" 2 564 "void(int32 value)" `532 
f N "set_ticks" 2 565 ""
v L "stream" 2 565 "int8" `535 
v L "value" 2 565 "int8" `536 
f B "set_ticks" 2 565 "void(int8 stream,int8 value)" `534 
f N "set_ticks" 2 566 ""
v L "stream" 2 566 "int8" `538 
v L "value" 2 566 "int16" `539 
f B "set_ticks" 2 566 "void(int8 stream,int16 value)" `537 
f N "set_ticks" 2 567 ""
v L "stream" 2 567 "int8" `541 
v L "value" 2 567 "int32" `542 
f B "set_ticks" 2 567 "void(int8 stream,int32 value)" `540  "#use pwm() Prototypes:"
f N "pwm_on" 2 570 ""
f B "pwm_on" 2 570 "void()" `543 
f N "pwm_on" 2 571 ""
v L "stream" 2 571 "int8" `545 
f B "pwm_on" 2 571 "void(int8 stream)" `544 
f N "pwm_off" 2 572 ""
f B "pwm_off" 2 572 "void()" `546 
f N "pwm_off" 2 573 ""
v L "stream" 2 573 "int8" `548 
f B "pwm_off" 2 573 "void(int8 stream)" `547 
f N "pwm_set_duty" 2 574 ""
v L "duty" 2 574 "int16" `550 
f B "pwm_set_duty" 2 574 "void(int16 duty)" `549 
f N "pwm_set_duty" 2 575 ""
v L "stream" 2 575 "int8" `552 
v L "duty" 2 575 "int16" `553 
f B "pwm_set_duty" 2 575 "void(int8 stream,int16 duty)" `551 
f N "pwm_set_duty_percent" 2 576 ""
v L "percent" 2 576 "int16" `555 
f B "pwm_set_duty_percent" 2 576 "void(int16 percent)" `554 
f N "pwm_set_duty_percent" 2 577 ""
v L "stream" 2 577 "int8" `557 
v L "percent" 2 577 "int16" `558 
f B "pwm_set_duty_percent" 2 577 "void(int8 stream,int16 percent)" `556 
f N "pwm_set_frequency" 2 578 ""
v L "frequency" 2 578 "int32" `560 
f B "pwm_set_frequency" 2 578 "void(int32 frequency)" `559 
f N "pwm_set_frequency" 2 579 ""
v L "stream" 2 579 "int8" `562 
v L "frequency" 2 579 "int32" `563 
f B "pwm_set_frequency" 2 579 "void(int8 stream,int32 frequency)" `561  "#use capture() Prototypes:"
f N "get_capture_time" 2 582 ""
f B "get_capture_time" 2 582 "int16()" `564 
f N "get_capture_time" 2 583 ""
v L "stream" 2 583 "int8" `566 
f B "get_capture_time" 2 583 "int16(int8 stream)" `565 
f N "get_capture_event" 2 584 ""
f B "get_capture_event" 2 584 "int8()" `567 
f N "get_capture_event" 2 585 ""
v L "stream" 2 585 "int8" `569 
f B "get_capture_event" 2 585 "int8(int8 stream)" `568  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 598 ""
v L "address" 2 598 "int16" `571 
f B "goto_address" 2 598 "void(int16 address)" `570 
f N "label_address" 2 599 ""
v L "label" 2 599 "int16" `573 
f B "label_address" 2 599 "int16(int16 label)" `572  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 602 ""
v L "address" 2 602 "int16" `575 
v L "dataptr" 2 602 "*int8" `576 
v L "count" 2 602 "int16" `577 
f B "read_program_memory" 2 602 "void(int16 address,*int8 dataptr,int16 count)" `574 
f N "read_program_eeprom" 2 603 ""
v L "address" 2 603 "int16" `579 
f B "read_program_eeprom" 2 603 "int16(int16 address)" `578  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 2 606 ""
v L "address" 2 606 "int16" `581 
f B "erase_program_eeprom" 2 606 "void(int16 address)" `580 
f N "write_program_memory" 2 607 ""
v L "address" 2 607 "int16" `583 
v L "dataptr" 2 607 "*int8" `584 
v L "count" 2 607 "int16" `585 
f B "write_program_memory" 2 607 "void(int16 address,*int8 dataptr,int16 count)" `582 
f N "write_program_eeprom" 2 608 ""
v L "address" 2 608 "int16" `587 
v L "data" 2 608 "int16" `588 
f B "write_program_eeprom" 2 608 "void(int16 address,int16 data)" `586  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 615 "unsigned int8"
f N "read_eeprom" 2 618 ""
v L "address" 2 618 "int8" `590 
f B "read_eeprom" 2 618 "int8(int8 address)" `589 
f N "write_eeprom" 2 619 ""
v L "address" 2 619 "int8" `592 
v L "value" 2 619 "int8" `593 
f B "write_eeprom" 2 619 "void(int8 address,int8 value)" `591  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 626 ""
v L "interrupt" 2 626 "int32" `595 
f B "enable_interrupts" 2 626 "void(int32 interrupt)" `594 
f N "disable_interrupts" 2 627 ""
v L "interrupt" 2 627 "int32" `597 
f B "disable_interrupts" 2 627 "void(int32 interrupt)" `596 
f N "clear_interrupt" 2 628 ""
v L "interrupt" 2 628 "int32" `599 
f B "clear_interrupt" 2 628 "void(int32 interrupt)" `598 
f N "interrupt_active" 2 629 ""
v L "interrupt" 2 629 "int32" `601 
f B "interrupt_active" 2 629 "int8(int32 interrupt)" `600 
f N "interrupt_enabled" 2 630 ""
v L "interrupt" 2 630 "int32" `603 
f B "interrupt_enabled" 2 630 "int8(int32 interrupt)" `602 
f N "ext_int_edge" 2 631 ""
v L "source" 2 631 "int8" `605 
v L "edge" 2 631 "int8" `606 
f B "ext_int_edge" 2 631 "void(int8 source,int8 edge)" `604 
f N "jump_to_isr" 2 632 ""
v L "address" 2 632 "int16" `608 
f B "jump_to_isr" 2 632 "void(int16 address)" `607  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 634 "0x40"
d G "H_TO_L" 2 635 "0"
d G "GLOBAL" 2 637 "0x0BC0"
d G "PERIPH" 2 638 "0x0B40"
d G "INT_RTCC" 2 639 "0x000B20"
d G "INT_RB" 2 640 "0x00FF0B08"
d G "INT_EXT_L2H" 2 641 "0x50000B10"
d G "INT_EXT_H2L" 2 642 "0x60000B10"
d G "INT_EXT" 2 643 "0x000B10"
d G "INT_AD" 2 644 "0x008C40"
d G "INT_TBE" 2 645 "0x008C10"
d G "INT_RDA" 2 646 "0x008C20"
d G "INT_TIMER1" 2 647 "0x008C01"
d G "INT_TIMER2" 2 648 "0x008C02"
d G "INT_CCP1" 2 649 "0x008C04"
d G "INT_SSP" 2 650 "0x008C08"
d G "INT_EEPROM" 2 651 "0x008D10"
d G "INT_TIMER0" 2 652 "0x000B20"
d G "INT_COMP" 2 653 "0x008D40"
d G "INT_OSC_FAIL" 2 654 "0x008D80"
F N "main" 0 6 ""
F G "main" 0 7 "void()" `615 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
